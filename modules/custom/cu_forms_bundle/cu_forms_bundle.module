<?php


/**
 * Implements hook_node_presave().
 *
 * As of webform 4.18, progress bars appear on every form.
 * This presave removes the progress bar if node is new.
 * At any point, the author can add the progress bar back.
 */
function cu_forms_bundle_node_presave($node) {
  if ($node->is_new && $node->type === 'webform') {
    $form_components = $node->webform['components'];

    $types = [];
    foreach ($form_components as $form_component) {
      foreach ($form_component as $key => $value) {
        if ($key == 'type') {
          $types[] = $value;
        }
      }
    }

    if (!in_array('pagebreak', $types) || sizeof($types) == 0) {
      $node->webform['progressbar_bar'] = 0;
      drupal_set_message(t('Progress bar has been unchecked due to your lack of faith.'));
    }
  }
}

/**
 * Define site roles in code.
 *
 * Create a secure_permissions_data module directory and place this function
 * in secure_permissions_data.module.
 *
 * @return
 *   An array defining all the roles for the site.
 */
function cu_forms_bundle_secure_permissions_roles() {
  return array(
    'form_manager',
    'form_submitter',
  );
}

function cu_forms_bundle_menu() {
  $items = array();
  
  $items['cu-forms-bundle/autocomplete'] = array(
    'page callback' => 'form_users_autocomplete',
    'access arguments' => array('access user profiles'),
    'type' => MENU_CALLBACK,
  );

  $items['entityreference/autocomplete/single/field_add_form_manager/node/webform/%'] = array(
    'page callback' => 'form_users_autocomplete',
    'page arguments' => array(2, 3, 4, 5),
    'access arguments' => array('access user profiles'),
    'type' => MENU_CALLBACK,
  );

  $items['entityreference/autocomplete/single/field_webform_results_access/node/webform/%'] = array(
    'page callback' => 'form_users_autocomplete',
    'page arguments' => array(2, 3, 4, 5),
    'access arguments' => array('access user profiles'),
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Define site permissions in code.
 *
 * Create a secure_permissions_data module directory and place this function
 * in secure_permissions_data.module.
 *
 * @param $role
 *   The role for which the permissions are being requested.
 *
 * @return
 *   An array defining all the permissions for the site.
 */

function cu_forms_bundle_secure_permissions($role) {
  $permissions = array(
    'anonymous user' => array(),
    'authenticated user' => array(
    ),
    'administrator' => array(
      'access all webform results',
      'access own webform results',
      'access own webform submissions',
      'administer cu feedback module',
      'assign form_manager role',
      'create webform content',
      'delete all webform submissions',
      'delete any webform content',
      'delete own webform content',
      'delete own webform submissions',
      'edit all webform submissions',
      'edit any webform content',
      'edit own webform content',
      'edit own webform submissions',
      'edit users with role form_manager',
      'cancel users with role form_manager',
      'edit webform components',
      'view unused forms',
    ),
    'content_editor' => array(
      'edit webform components',
      'view unused forms',
    ),
    'form_submitter' => array(
      'edit own webform submissions',
      'access own webform submissions',
      'delete own webform submissions',
    ),
    'form_manager' => array(
      'access own webform results',
      'access own webform submissions',
      'create webform content',
      'delete own webform content',
      'delete own webform submissions',
      'delete all webform submissions',
      'edit own webform content',
      'edit own webform submissions',
      'edit webform components',
      'view unused forms',
    ),
    'developer' => array(
      'access all webform results',
      'access own webform results',
      'access own webform submissions',
      'administer cu feedback module',
      'assign form_manager role',
      'create webform content',
      'delete all webform submissions',
      'delete any webform content',
      'delete own webform content',
      'delete own webform submissions',
      'edit all webform submissions',
      'edit any webform content',
      'edit own webform content',
      'edit own webform submissions',
      'edit users with role form_manager',
      'cancel users with role form_manager',
      'edit webform components',
      'view unused forms',
    ),
    'edit_my_content' => array(
      'edit webform components',
      'view unused forms',
    ),
    'edit_only' => array(
      'edit webform components',
      'view unused forms',
    ),
    'site_editor' => array(
      'edit webform components',
      'view unused forms',
    ),
    'site_owner' => array(
      'access all webform results',
      'access own webform results',
      'access own webform submissions',
      'administer cu feedback module',
      'assign form_manager role',
      'create webform content',
      'delete all webform submissions',
      'delete any webform content',
      'delete own webform content',
      'delete own webform submissions',
      'edit all webform submissions',
      'edit any webform content',
      'edit own webform content',
      'edit own webform submissions',
      'edit users with role form_manager',
      'cancel users with role form_manager',
      'edit webform components',
      'view unused forms',
    ),
  );
  if (isset($permissions[$role])) {
    return $permissions[$role];
  }
}

/**
 * Implements hook_express_help()
 *
 * Add contextual help for Webforms.
 *
 * @param $variables
 *   Array with information about help hooks
 * @return $variables
 */
function cu_forms_bundle_express_help($variables) {
  $variables['node/add/webform'][] = array(
    'title' => 'Webform Help',
    'short_title' => 'Webform Help',
    'url' => 'http://www.colorado.edu/node/610',
  );
  $variables['node/%/webform'][] = array(
    'title' => 'Adding Webform Components',
    'short_title' => 'Webform Components',
    'url' => '/tutorial/v2/second-add-form-components',
  );
  $variables['node/%/webform/components/new/select'][] = array(
    'title' => 'Adding Select Options to Webforms',
    'short_title' => 'Webform Select Options',
    'url' => '/tutorial/v2/checkboxes-radio-buttons-select-lists',
  );
  $variables['node/%/webform/conditionals'][] = array(
    'title' => 'Webform Conditionals Help',
    'short_title' => 'Webform Conditionals',
    'url' => '/tutorial/v2/webform-conditional-actions',
  );
  $variables['node/%/webform/configure'][] = array(
    'title' => 'Adjust Webform Settings',
    'short_title' => 'Webform Settings',
    'url' => '/tutorial/v2/fourth-adjust-webform-settings',
  );
  $variables['node/%/webform/emails'][] = array(
    'title' => 'Configure Email Templates for Webforms',
    'short_title' => 'Webform Email Template',
    'url' => '/tutorial/v2/edit-email-submission-template',
  );
  $variables['node/%/webform-results'][] = array(
    'title' => 'Check Webform Results',
    'short_title' => 'Webform Results',
    'url' => '/tutorial/v2/check-webform-results',
  );
  $variables['admin/settings/feedback/settings'][] = array(
    'title' => 'Feedback Form Help',
    'short_title' => 'Feedback Form Help',
    'url' => '/node/16',
  );

  return array_map(
    function($a) {
      $a[0]['module'] = 'cu_forms_bundle';
      return $a;
    },
    $variables);
}

/**
 * Implements hook_express_help_field().
 */
function cu_forms_bundle_express_help_fields($variables) {
  $variables['webform_configure_form']['fields'] = array(
    'webform-captcha' => array(
      'title' => 'Add Spam Prevention to Webforms',
      'short_title' => 'Webform Spam Prevention',
      'url' => '/tutorial/v2/add-spam-prevention-webforms',
      'module' => 'cu_forms_bundle',
    ),
  );

  return $variables;
}

/**
 * Limit extensions in uploaded files via webform file field.
 *
 * @param $form
 * @param $form_state
 * @param $form_id
 */
function cu_forms_bundle_form_webform_component_edit_form_alter(&$form, &$form_state, $form_id) {
  // Hide certain pieces we don't want available.
  $form['validation']['extensions']['addextensions']['#access'] = FALSE;
  unset($form['validation']['extensions']['types']['media']);

  // Limit options of webform file extensions.
  $form['validation']['extensions']['types']['archives']['#options'] = array(
    'bz2' => 'bz2',
    'gz' => 'gz',
    'rar' => 'rar',
    'sit' => 'sit',
    'tar' => 'tar',
    'zip' => 'zip'
  );
  $form['validation']['extensions']['types']['documents']['#options'] = array(
    'txt' => 'txt',
    'rtf' => 'rtf',
    'html' => 'html',
    'pdf' => 'pdf',
    'doc' => 'doc',
    'docx' => 'docx',
    'odt' => 'odt',
    'ppt' => 'ppt',
    'pptx' => 'pptx',
    'odp' => 'odp',
    'xls' => 'xls',
    'xlsx' => 'xlsx',
    'ods' => 'ods',
    'xml' => 'xml'
  );
  $form['validation']['extensions']['types']['desktopimages']['#options'] = array(
    'bmp' => 'bmp',
    'eps' => 'eps',
    'tif' => 'tif',
    'pict' => 'pict',
    'psd' => 'psd'
  );
  $form['validation']['extensions']['types']['webimages']['#options'] = array(
    'gif' => 'gif',
    'jpg' => 'jpg',
    'png' => 'png'
  );
  $form['validation']['extensions']['addextensions']['#default_value'] = '';
}

/**
 * Implements hook_menu_alter().
 */
function cu_forms_bundle_menu_alter(&$items) {
  $list_role = user_roles($membersonly = FALSE, $permission = NULL);
  $rid = array_search('form_manager', $list_role);

  // If the user has form owner role, they have view all submissions, so we then cut out access in favor of the
  // user entity reference field on the webform content type.
  if (user_has_role($rid)) {
    $items['node/%webform_menu/webform']['access callback'] = 'cu_forms_bundle_webform_results_access';
    $items['node/%webform_menu/webform-results']['access callback'] = 'cu_forms_bundle_webform_results_access';
    $items['node/%webform_menu/submission/%webform_menu_submission']['access callback'] = 'cu_forms_bundle_webform_results_access';
  }
}

/**
 * Implementation of hook_webform_results_access().
 *
 * Hooks from webform that we need to override to get our own permissions.
 */
function cu_forms_bundle_webform_results_access($node, $account = NULL) {
  return cu_forms_bundle_webform_access($node, $account);
}

/**
 * Implementation of hook_webform_submission_access().
 */
function cu_forms_bundle_webform_submission_access($node, $submission, $op = 'view', $account = NULL) {
  return cu_forms_bundle_webform_access($node, $account);
}

/**
 * Because cu_forms_bundle_node_access() sends perm errors when a foreach is placed inside the hook.
 */
function _check_form_managers($node) {
  global $user;

  if (!empty($node->field_add_form_manager)) {
    $uid_form_manager = $node->field_add_form_manager['und'];
  } else {
    $uid_form_manager = array();
  }

  // If your user has been added to the field_add_form_manager, you can view submissions.
  foreach ($uid_form_manager as $uid) {
    if (in_array($user->uid, $uid)) {
      return TRUE;
    }
  }
}

/**
 * Returns true if account is a value in the webform results user
 * reference field on the webform content type.
 *
 * @param object $node
 *   The webform node.
 * @param object $account
 *   The user account, optional. Defaults to current user.
 *
 * @return bool
 *   Returns true if user is listed, false otherwise.
 */
function cu_forms_bundle_webform_access($node, $account = NULL) {
  global $user;
  $access = FALSE;

  // List of all users added via the user entity reference fields in the webform content type.
  if (!empty($node->field_webform_results_access)) {
    $uid_form_sub = $node->field_webform_results_access['und'];
  } else {
    $uid_form_sub = array();
  }

  if (!empty($node->field_add_form_manager)) {
    $uid_form_manager = $node->field_add_form_manager['und'];
  } else {
    $uid_form_manager = array();
  }

  // If your user has been added to the field_add_form_manager, you can view submissions.
  foreach ($uid_form_manager as $uid) {
    if (in_array($user->uid, $uid)) {
      $access = TRUE;
    }
  }

  // If your user has been added to the field_webform_results_access, you can view submissions.
  foreach ($uid_form_sub as $uid) {
    if (in_array($user->uid, $uid)) {
      $access = TRUE;
    }
  }

  // If you are the author of the (webform) node, you can always view submissions.
  if ($node->uid === $user->uid) {
    $access = TRUE;
  }

  return $access;
}

/**
 * Implements hook_node_access().
 */
function cu_forms_bundle_node_access($node, $op, $account) {
  $type = 'webform';
  // If your user has been added to the field_add_form_manager, you can edit the node.
  if (in_array($type, node_permissions_get_configured_types())) {
    if ($op == 'update') {
      if (_check_form_managers($node) || user_access('edit own ' . $type . ' content', $account) && $account->uid == $node->uid) {
        return NODE_ACCESS_ALLOW;
      }
    }
  }
}

/**
 * Implement hook_form_ID_alter().
 *
 * This hides the user entity reference to non-authors who are also form owners.
 */
function cu_forms_bundle_form_webform_node_form_alter(&$form, &$form_state, $form_id) {
  global $user;
  // Get list of roles and then return form owner as $rid.
  $list_role = user_roles($membersonly = FALSE, $permission = NULL);
  $rid = array_search('form_manager', $list_role);

  // Current user and author of the form--if they're a match, they can edit the user entity ref field.
  $uid = $user->uid;
  $author = $form['uid']['#value'];
  if ($uid !== $author && user_has_role($rid)) {
    $form['field_webform_results_access']['#access'] = 0;
  }

  $sub_field_name = 'field_webform_results_access';
  $edit_field_name = 'field_add_form_manager';
  if (!isset($form[$sub_field_name]) || !isset($form[$edit_field_name])) { return; }
  // Attach a custom autocomplete path to our user's field so we can search
  // by address field first and last names.
  foreach($form[$edit_field_name]['und'] as $delta => $element) {
    if (!is_numeric($delta)) { continue; }
    $form[$edit_field_name]['und'][$delta]['target_id']['#autocomplete_path'] = 'cu-forms-bundle/autocomplete';
  }
  foreach($form[$sub_field_name]['und'] as $delta => $element) {
    if (!is_numeric($delta)) { continue; }
    $form[$sub_field_name]['und'][$delta]['target_id']['#autocomplete_path'] = 'cu-forms-bundle/autocomplete';
  }

  // Those fields were showing up above the body field.
  // @see https://github.com/CuBoulder/express/issues/2617.
  $body_weight = (int) $form['body']['#weight'];
  $form['field_webform_results_access']['#weight'] = $body_weight + 1;
  $form['field_add_form_manager']['#weight'] = $body_weight + 2;
}

/**
 * Return suggestions for path autocomplete.
 *
 * @param string $search
 *   The search result.
 */
function form_users_autocomplete($string = '') {
  $matches = array();

  $query = db_select('users', 'u');
  $query->leftJoin('realname', 'rn', 'u.uid = rn.uid');
  $query->fields('u', array('uid', 'name'));
  $query->condition(db_or()
    ->condition('rn.realname', '%' . db_like($string) . '%', 'LIKE')
    ->condition('u.name', '%' . db_like($string) . '%', 'LIKE')
  );
  $query->range(0, 10);
  $uids = $query->execute()->fetchCol();
  $accounts = user_load_multiple($uids);

  foreach ($accounts as $account) {
    if ($account->uid != 1 && count($account->roles) > 1) {
      $matches[t('!account (@uid)', array('!account' => format_username($account), '@uid' => $account->uid))] = t('!realname (@username)', array('!realname' => format_username($account), '@username' => $account->name));
    }
  }

  drupal_json_output($matches);
}

function cu_forms_bundle_form_user_external_invite_form_alter(&$form, &$form_state, &$form_id) {
  $form_manager_role = user_role_load_by_name('form_manager');
  $form['rid']['#options'][$form_manager_role->rid] = 'Form Manager';
}

/**
 * Implements hook_views_pre_render().
 *
 * Override the webform content type on the main content admin page.
 */
function cu_forms_bundle_views_pre_render(&$view) {
  $view->name; //checks for view machine name

  if ($view->name === 'cu_content_administration_override_view') {
    $needle = '<option value="webform">Webform</option>';
    $haystack = $view->filter['type']->view->exposed_widgets;
    $new_haystack = str_replace($needle, '', $haystack);
    $view->filter['type']->view->exposed_widgets = $new_haystack;
  }
}


/**
 * Implements hook_atlas_statistics().
 * IMPORTANT! If you are using a Boolean type for a field in Atlas, you need to
 * return FALSE rather than a null value.
 */
function cu_forms_bundle_atlas_statistics() {
  $statistics_data = array();

  $webform_stats = array(
    'total_submissions' => 0,
    'active_forms' => 0,
    'inactive_forms' => 0,
  );
  // Load all webforms.
  $webforms = node_load_multiple(array(), array(
    'type' => 'webform',
  ));
  // Loop through webforms and tally the statistic totals.
  module_load_include('inc', 'webform', 'includes/webform.submissions');
  foreach ($webforms as $webform) {
    // Tally submission count.
    $webform_stats['total_submissions'] += webform_get_submission_count($webform->nid);
    // Set active/inactive bit and tally.
    $is_active = atlas_statistics_webform_is_active($webform->nid);
    $webform_stats['active_forms'] += $is_active == TRUE ? 1 : 0;
    $webform_stats['inactive_forms'] += $is_active == FALSE ? 1 : 0;
  }

  $statistics_data['webforms'] = $webform_stats;

  return $statistics_data;
}
