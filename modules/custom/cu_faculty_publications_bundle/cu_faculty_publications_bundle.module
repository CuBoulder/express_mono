<?php

/**
  * @file
  * Code for the Faculty Publications feature.
  */
include_once 'cu_faculty_publications_bundle.features.inc';

/**
  * Implements hook_theme_registry_alter().
  *
  * Let Drupal know that we've got bean--faculty_publications.tpl.php in our module
  * directory.
  */
function cu_faculty_publications_bundle_theme_registry_alter(&$theme_registry) {
  $module_path = drupal_get_path('module', 'cu_faculty_publications_bundle');
  $theme_registry_copy = $theme_registry;
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'bean', $module_path);
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
  $hooks = array('bean');
  foreach ($hooks as $h) {
    if (isset($theme_registry[$h]['theme paths'])) {
      $first_element = array_shift($theme_registry[$h]['theme paths']);
      array_unshift($theme_registry[$h]['theme paths'], array_shift($theme_registry[$h]['theme paths']), $module_path);
    }
  }
}

/**
  * Implements hook_theme().
  */
function cu_faculty_publications_bundle_theme(&$existing, $type, $theme, $path) {
  $registry = array();
  $template_dir = drupal_get_path('module', 'cu_faculty_publications_bundle') . '/templates';
  $registry['faculty_publication'] = array(
    'template' => 'faculty-publication',
    'path' => $template_dir,
  );
  return $registry;
}

/**
  * Implements hook_preprocess_entity().
  */
function cu_faculty_publications_bundle_preprocess_entity(&$vars) {
  // $entity_type = $vars['elements']['#entity_type'];
  if ($vars['elements']['#bundle'] == 'faculty_publications') {

    $endpoint = variable_get('cu_faculty_publications_endpoint', 'https://experts.colorado.edu/es/fispubs-v1/publication/_search');
    $fisEndpoint = variable_get('cu_faculty_fis_endpoint', 'https://experts.colorado.edu/es/fis/_search');
    $arguments = array();
    $numberOfResultsPerPage = 25;
    $requestedNumberOfResults = 10;
    $currentPage = pager_find_page();
    $cacheID = current_path() . "?page=" . $currentPage;
    // Check for publication date filter.
    if (!empty($vars['bean']->field_faculty_publication_date)) {
      $date1 = strtotime($vars['bean']->field_faculty_publication_date[LANGUAGE_NONE][0]['value']);
      $date2 = strtotime($vars['bean']->field_faculty_publication_date[LANGUAGE_NONE][0]['value2']);

      $date1 = date('Y-m-d', $date1);
      $date2 = date('Y-m-d', $date2);
      $arguments['q'][] = 'publicationDate:[' . $date1 . ' TO ' . $date2 . ']';
    }

    // Check for department id or name
    if (!empty($vars['bean']->field_faculty_pub_department)) {
      $department = $vars['bean']->field_faculty_pub_department[LANGUAGE_NONE][0]['value'];

      // Search for a department id number.
      if (intval($department)) {
        $arguments['q'][] = "authors.organization.uri:*_$department";
      }

      // Use name as search term.
      // TODO: more string validation here?
      else {
        $arguments['q'][] = "authors.organization.name:$department";
      }
    }

    // Check for sort order.
    if (!empty($vars['bean']->field_faculty_publications_sort)) {
      $order = $vars['bean']->field_faculty_publications_sort[LANGUAGE_NONE][0]['value'];

      if ($order === "date-desc") {
        $arguments['sort'] = 'publicationDate:desc';
      }
      else if ($order === "date-asc") {
        $arguments['sort'] = 'publicationDate:asc';
      }
    }

    $mockData = [
      0 => ['value' => "mark.hernandez@Colorado.EDU"],
      1 => ['value' => "aiden.hughes@example.com"],
      2 => ['value' => "dwight.stone@example.com"],
      3 => ['value' => "ethan.warren@example.com"],
      4 => ['value' => "jackson.knight@example.com"],
    ];
    // $orcidResults = get_author_orcids($vars['bean']->field_faculty_publication_name[LANGUAGE_NONE], 'value', $fisEndpoint);
    $orcidResults = get_author_orcids($mockData, 'value', $fisEndpoint);
    $orcids = $orcidResults['orcids'];
    foreach ($orcidResults['noResults'] as $email) {
      $vars['content']['no_results']['#markup'] .= "<p>No results found for email $email.</p>";
    }
    $authorOrcidStringQuoted = formQueryStringFromArray($orcids);
    $arguments['q'][] = "authors.orcid:$authorOrcidStringQuoted";

    // // Check for author email.
    // if (!empty($vars['bean']->field_faculty_publication_email) || !empty($vars['bean']->field_faculty_publication_name)) {
    //   // TODO: Find out why the below occurs and change it.
    //     // For some reason there is data in $vars['content']['field_faculty_publication_name'].
    //     // Also in $vars['field_faculty_publication_name']. I do not know why.
    //     // They need to be removed as they add to the output of the rendered page.
    //   unset($vars['field_faculty_publication_name']);
    //   unset($vars['content']['field_faculty_publication_name']);

    //   // Choose the value for the email. If *_email use it. Otherwise use *_name.
    //   $email = $vars['bean']->field_faculty_publication_email[LANGUAGE_NONE][0]['email']
    //     ? $vars['bean']->field_faculty_publication_email[LANGUAGE_NONE][0]['email']
    //     : $vars['bean']->field_faculty_publication_name[LANGUAGE_NONE][0]['value'];

    //   $fisEndpoint .= "?q=email:\"$email\"";
    //   $emailResponse = drupal_http_request($fisEndpoint);

    //   if ($emailResponse->code == '200') {
    //     $emailResult = drupal_json_decode($emailResponse->data, true);
    //     $orcid = $emailResult['hits']['hits'][0]['_source']['orcid'];

    //     if ($orcid) {
    //       $arguments['q'][] = "authors.orcid:\"$orcid\"";
    //     }
    //     else {
    //       $vars['content']['no_results']['#markup'] .= "<p>No results found for email $email.</p>";
    //     }
    //   }
    // }

    // Check for requestedNumberOfResults.
    if (!empty($vars['bean']->field_faculty_pub_results)) {
      $numberOfResults = $vars['bean']->field_faculty_pub_results[LANGUAGE_NONE][0]['value'];
      $offset = $currentPage * $numberOfResultsPerPage;
      $arguments['from'] = $offset;
      $arguments['size'] = $numberOfResultsPerPage;

      if ($numberOfResults === 'all') {
        // 10,000 search results is the default maximum amount of Elastic Search results.
        $requestedNumberOfResults = 10000;
      }

      elseif ($numberOfResults === '25' || $numberOfResults === '50' || $numberOfResults === '100') {
        $requestedNumberOfResults = intval($numberOfResults);
      }
    }

    // Convert all 'q' arguments to a string joined by ' AND ' operator.
    if (count($arguments['q']) > 1) {
      $arguments['q'] = implode(' AND ', $arguments['q']);
    }
    elseif (count($arguments['q']) === 1) {
      $arguments['q'] = $arguments['q'][0];
    }

    // Form the final request url.
    $elasticSearchRequest = url($endpoint, ['query' => $arguments]);

    // Send query to facutly publications database and display results.
    // if (empty($vars['content']['no_results'])) {
      $publications = get_publication_data($elasticSearchRequest, $cacheID);

      if ($publications['results']) {
        $totalResults = $publications['total'] > $requestedNumberOfResults ? $requestedNumberOfResults : $publications['total'];
        pager_default_initialize($totalResults, $numberOfResultsPerPage);

        // Check if results are from cache.
        // Put in an HTML comment to confirm if results are from cache or not.
        $isFromCache = $publications['isFromCache'] ? "YES" : "NO";
        $vars['content']['publications'][]['#markup'] = "<!-- Results are from cache: $isFromCache -->";

        foreach ($publications['results'] as $item) {
          $vars['content']['publications'][]['#markup'] = theme('faculty_publication', $item['_source']);
        }

        $vars['content']['publications'][]['#markup'] = theme('pager');
      }

      else {
        $vars['content']['no_results']['#markup'] = 'There are no results for your query. Please check your data filters and try again.';
      }
    // }
  }
}

/**
 * Returns an array of orcids.
 * The fieldArray is straight from a drupal field so the data is a bit buried.
 * The fieldArrayFinalIdentifier is a string that will match the final buried property's key.
 * The dbUrl is the fis database needed to get authors' information.
 * The previouslResults are the results of this function if called earlier.
 * @param [array] $fieldArray
 * @param [string] $fieldArrayFinalIdentifier
 * @param [string] $dbUrl
 * @param [array] $previouslResults
 * @return array of string orcids
 */
function get_author_orcids($fieldArray, $fieldArrayFinalIdentifier, $dbUrl, $previousResults = array('orcids' => [], 'noResults' => [])) {
  // Add quotations to each email address and push it into $authorEmailArray.
  // The quotation marks force elastic search to search for an exact match to the entire email address, not just parts of it. 
  $orcids = array();
  $authorEmailArray = array_map(function($data) use($fieldArrayFinalIdentifier) { return strtolower($data[$fieldArrayFinalIdentifier]); }, $fieldArray);
  // $authorEmailArrayQuoted = array_map(function($data) { return "\"" . $data . "\""; }, $authorEmailArray);
  // $authorEmailString = implode(" OR ", $authorEmailArrayQuoted);
  $authorEmailString = formQueryStringFromArray($authorEmailArray);
  $queryArray = ['q' => "email:{$authorEmailString}"];
  $requestUrl = url($dbUrl, ['query' => $queryArray]);

  // Send request to get authors' orcids from their emails
  $emailResponse = drupal_http_request($requestUrl);

  if ($emailResponse->code =='200') {
    $emailResult = drupal_json_decode($emailResponse->data, true);
    $data = $emailResult['hits']['hits'];
    // get the orcids from each database hit
    foreach($data as $author) {
      $authorOrcid = $author['_source']['orcid'];
      $authorEmail = strtolower($author['_source']['email'][0]);
      if ($authorOrcid) {
        array_push($orcids, $authorOrcid);
        $index = array_search($authorEmail, $authorEmailArray);
        array_splice($authorEmailArray, $index, 1);
      }
    }
  }

  // Merge in previosResults, if any, and remove duplicates.
  $orcids = array_merge($previousResults['orcids'], $orcids);
  $orcids = array_unique($orcids);
  $authorEmailArray = array_merge($previousResults['noResults'], $authorEmailArray);
  $authorEmailArray = array_unique($authorEmailArray);

  return ['orcids' => $orcids, 'noResults' => $authorEmailArray];
}

function formQueryStringFromArray($arr) {
  $arrayQuoted = array_map(function($data) { return "\"" . $data . "\""; }, $arr);
  return implode(" OR ", $arrayQuoted);
}

function get_publication_data($url, $cid) {
  $publications = [];
  $cache = cache_get($cid, 'cache_cu_faculty_publications_bundle');

  if (isset($cache->data)) {
    $publications = $cache->data['publications'];
    $publications['isFromCache'] = true;
  }
  
  if ($cache->data['expiration'] <= time() || !isset($cache->data)) {
    $response = drupal_json_decode(drupal_http_request($url)->data, true);
    
    if ($response) {
      $newData = [
        'publications' => [
          'total' => $response['hits']['total'],
          'results' => $response['hits']['hits'],
        ],
        'expiration' => time() + (24 * 60 * 60)
      ];
  
      cache_set($cid, $newData, 'cache_cu_faculty_publications_bundle');
      if (!isset($cache->data)) {
        $publications = $newData['publications'];
        $publications['isFromCache'] = false;
      }
    }
  }

  return $publications;
}

function cu_faculty_person_type_names() {
  $query = db_select('field_data_field_person_email', 'email');
  $query->join('field_data_field_person_first_name', 'fn', 'email.entity_id = fn.entity_id');
  $query->join('field_data_field_person_last_name', 'ln', 'email.entity_id = ln.entity_id');
  $query->addField('email', 'field_person_email_email', 'e_mail');
  $query->addField('fn', 'field_person_first_name_value', 'first_name');
  $query->addField('ln', 'field_person_last_name_value', 'last_name');
  $result = $query->execute();
  
  $facultyNamesAndEmails = [];
  foreach ($result as $record) {
    $firstName = $record->first_name;
    $lastName = $record->last_name;
    $email = $record->e_mail;
    $facultyNamesAndEmails[$email] = "$firstName $lastName";
  }

  return $facultyNamesAndEmails;
}

function cu_faculty_publications_sort() {
  return array('date-desc' => 'Newest to Oldest', 'date-asc' => 'Oldest to Newest');
}

function cu_faculty_publications_results() {
  return array('25' => '25', '50' => '50' , '100' => '100', 'all' => 'ALL');
}

/**
  * Implements hook_secure_permissions().
  *
  * Adding permissions for newsletter
  */
function cu_faculty_publications_bundle_secure_permissions($role) {
  $permissions = array(
    'anonymous user' => array(
      'view any faculty_publications bean',
    ),
    'authenticated user' => array(
      'view any faculty_publications bean',
    ),
    'administrator' => array(
      'create any faculty_publications bean',
      'delete any faculty_publications bean',
      'edit any faculty_publications bean',
      'view any faculty_publications bean',
    ),
    'developer' => array(
      'create any faculty_publications bean',
      'delete any faculty_publications bean',
      'edit any faculty_publications bean',
      'view any faculty_publications bean',
    ),
    'edit_my_content' => array(
      'view any faculty_publications bean',
    ),
    'edit_only' => array(
      'edit any faculty_publications bean',
      'view any faculty_publications bean',
    ),
    'site_editor' => array(
      'create any faculty_publications bean',
      'delete any faculty_publications bean',
      'edit any faculty_publications bean',
      'view any faculty_publications bean',
    ),
    'site_owner' => array(
      'create any faculty_publications bean',
      'delete any faculty_publications bean',
      'edit any faculty_publications bean',
      'view any faculty_publications bean',
    ),
  );

  if (isset($permissions[$role])) {
    return $permissions[$role];
  }
}

/**
  * Implements hook_flush_caches().
  */
function cu_faculty_publications_bundle_flush_caches() {
  return array('cache_cu_faculty_publications_bundle');
}