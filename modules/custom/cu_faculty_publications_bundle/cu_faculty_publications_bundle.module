<?php

/**
 * @file
 * Code for the Faculty Publications feature.
 */

include_once 'cu_faculty_publications_bundle.features.inc';

/**
 * Implements hook_theme_registry_alter().
 *
 * Let Drupal know that we've got bean--faculty_publications.tpl.php in our module
 * directory.
 */
function cu_faculty_publications_bundle_theme_registry_alter(&$theme_registry) {
  $module_path = drupal_get_path('module', 'cu_faculty_publications_bundle');
  $theme_registry_copy = $theme_registry;
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'bean', $module_path);
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
  $hooks = array('bean');
  foreach ($hooks as $h) {
    if (isset($theme_registry[$h]['theme paths'])) {
      // $first_element = array_shift($theme_registry[$h]['theme paths']);
      array_unshift($theme_registry[$h]['theme paths'], array_shift($theme_registry[$h]['theme paths']), $module_path);
    }
  }
}

/**
 * Implements hook_menu().
 */
function cu_faculty_publications_bundle_menu() {
  $items = array();
  $items['faculty-publications/%'] = array(
    'title callback' => 'person_publications_list_all_title',
    'title arguments' => array(1),
    'description' => 'List of all of a particular faculty member\'s publications',
    'page callback' => 'person_publications_list_all_page',
    'page arguments' => array(1),
    'access callback' => TRUE
  );
  return $items;
}

/**
 * Creates view for complete listing of a faculty member's publications at the url 'faculty-publications/[$person node id number].
 */
function person_publications_list_all_title($person_nid) {
  $person = node_load($person_nid);

  if ($person && $person->type == 'person') {

    return t("Publications by {$person->title}");
  }
  else {
    return 'Faculty Publications';
  }
}

/**
 * Creates view for complete listing of a faculty member's publications at the url 'faculty-publications/[$person node id number].
 */
function person_publications_list_all_page($person_nid) {
  $person = node_load($person_nid);
  if ($person && $person->type == 'person') {
    $order = variable_get('all_publications_list_order', 'date-desc');
    $fakeBeanObject = new stdClass();
    $fakeBeanObject->field_faculty_publication_email = $person->field_person_email;
    $fakeBeanObject->field_faculty_publications_sort = [LANGUAGE_NONE => [0 => ['value' => $order]]];
    $fakeBeanObject->field_faculty_pub_results = [LANGUAGE_NONE => [0 => ['value' => 'all']]];

    $publicationData = get_publication_data(NULL, TRUE, $fakeBeanObject);

    return [
      'name' => [
        '#type' => 'markup',
        '#markup' => l("Return to {$person->title}'s page", "node/{$person->nid}", ['attributes' => ['class' => ['small-text']]]),
        '#prefix' => '<p>',
        '#suffix' => '</p>'
      ],
      'content' => publish_data($publicationData)
    ];
  }

  else {
    return [
      'content' => [
        '#type' => 'markup',
        '#markup' => "<div class=\"messages warning\">$person_nid: No publications associated with this node"
      ]
    ];
  }
}

/**
 * Implements hook_theme().
 */
function cu_faculty_publications_bundle_theme(&$existing, $type, $theme, $path) {
  $registry = array();
  $template_dir = drupal_get_path('module', 'cu_faculty_publications_bundle') . '/templates';
  $registry['faculty_publication'] = array(
    'template' => 'faculty-publication',
    'path' => $template_dir,
  );
  return $registry;
}

/**
 * Implements hook_block_info().
 */
function cu_faculty_publications_bundle_block_info() {
  return array(
    'person_publications_list' => array(
      'info' => t("Person Publications List")
    )
  );
}

/**
 * Implements hook_block_view().
 */
function cu_faculty_publications_bundle_block_view($delta = '') {
  switch ($delta) {
    case 'person_publications_list':
      $block = array();

      if (($node = menu_get_object()) && ($node->type == 'person')) {
        $skipCache = user_access('edit any faculty_publications bean');

        $order = variable_get('person_publications_list_order', 'date-desc');
        $number = variable_get('person_publications_list_number', 5);
        $fakeBeanObject = new stdClass();
        $fakeBeanObject->field_faculty_publication_email = $node->field_person_email;
        $fakeBeanObject->field_faculty_publications_sort = [LANGUAGE_NONE => [0 => ['value' => $order]]];
        $fakeBeanObject->field_faculty_pub_results = [LANGUAGE_NONE => [0 => ['value' => $number]]];

        $publicationData = get_publication_data($node->title, $skipCache, $fakeBeanObject);

        if (!$skipCache && !$publicationData['results']) {
          return $block;
        }

        else {
          $block['subject'] = 'Recent Publications:';
          $block['content'] = publish_data($publicationData);

          // Show a link to another page if person has more publications than shown here.
          if ($number < $publicationData['total']) {
            $link_url = "faculty-publications/{$node->nid}";

            $block['content']['full_list_link'] = array(
              '#type' => 'markup',
              '#markup' => l("See a full list of {$node->title}'s publications", $link_url, ['attributes' => ['class' => ['small-text']]]),
              '#prefix' => '<div>',
              '#suffix' => '</div>'
            );
          }

          return $block;
        }
      }
      break;

    default:
      break;
  }
}

/**
 * Implements hook_block_configure().
 */
function cu_faculty_publications_bundle_block_configure($delta = '') {
  // The block can be inserted using Context module and configured at /admin/structure/block/manage/cu_faculty_publications_bundle/person_publications_list/configure.
  switch ($delta) {
    case 'person_publications_list':
      $form = array(
        'order' => array(
          '#type' => 'select',
          '#options' => array('date-desc' => 'Newest to Oldest', 'date-asc' => 'Oldest to Newest'),
          '#title' => t('Order of Publications on Person page'),
          '#description' => t('Select the order you wish the results to be shown.'),
          '#default_value' => variable_get('person_publications_list_order', array('date-desc' => 'Newest to Oldest'))
        ),
        'number' => array(
          '#type' => 'textfield',
          '#description' => t('Type how many publications you would like to be listed on a Person page. Will only be saved if numerals are used.'),
          '#title' => t('Number of Publications on Person page'),
          '#default_value' => variable_get('person_publications_list_number', 5)
        ),
        'order_all' => array(
          '#type' => 'select',
          '#options' => array('date-desc' => 'Newest to Oldest', 'date-asc' => 'Oldest to Newest'),
          '#title' => t('Order of Publications on All Publications page'),
          '#description' => t('Select the order you wish the results to be shown when listing all of a Person\'s publications.'),
          '#default_value' => variable_get('all_publications_list_order', array('date-desc' => 'Newest to Oldest'))
        )
      );

      return $form;

    default:
      break;
  }
}

/**
 * Implements hook_block_save().
 */
function cu_faculty_publications_bundle_block_save($delta = '', $edit = array()) {
  switch ($delta) {
    case 'person_publications_list':
      if ($num = intval($edit['number'])) {
        variable_set('person_publications_list_number', $num);
      }

      variable_set('person_publications_list_order', $edit['order']);
      variable_set('all_publications_list_order', $edit['order_all']);
      break;

    default:
      break;
  }
}

/**
 * Implements hook_preprocess_entity().
 */
function cu_faculty_publications_bundle_preprocess_entity(&$vars) {
  if ($vars['elements']['#bundle'] == 'faculty_publications') {

    $nodePath = drupal_get_normal_path($_GET['q']);
    $cid = $_GET['page'] ? $nodePath . "/" . $_GET['page'] : $nodePath;
    $skipCache = user_access('edit any faculty_publications bean');

    $publicationData = get_publication_data($cid, $skipCache, $vars['bean']);

    $vars['content'] = publish_data($publicationData);
  }
}

/**
 * This function decides where to get data from. Whether to gather it from the module's cache, refresh the data from cache or to gather it from fresh requests to our experts' databases.
 * The publication data or errors/warnings are passed on to the UI.
 *
 * @param string $cid
 *   This is the url to this page/node being displayed or the Person node's name.
 * @param bool $skipCache
 *   This is set based on a user's permissions so that an editor can see their changes and not what has been cached previously.
 * @param object $beanObject
 *   This is the object with the form data needed for this block.
 *
 * @return array
 *   An associative array with data to pass on to the UI.
 *
 */
function get_publication_data($cid, $skipCache, $beanObject) {
  $cache = cache_get($cid, 'cache_cu_faculty_publications_bundle');
  $newExpiration = time() + (24 * 60 * 60);
  // First check if there is data in the cache and that it has not expired.
  // If so there is no need to build elastic search url, just return the cache.
  if (isset($cache->data) && $cache->data['expiration'] > time() && $skipCache === FALSE) {
    $publicationData = $cache->data;
    $publicationData['isFromCache'] = TRUE;
    return $publicationData;
  }

  // If the cache has expired try to refresh it and load new data.
  elseif (isset($cache->data) && $cache->data['expiration'] <= time() && $skipCache === FALSE) {
    $reqData = ['reqUrl' => $cache->data['reqUrl'], 'requestedNumberOfResults' => $cache->data['requestedNumberOfResults']];
    $response = drupal_http_request($cache->data['reqUrl']);

    if ($response->code == '200') {
      $parsedResponse = drupal_json_decode($response->data, TRUE);
      $newPublicationData = [
        'total' => $parsedResponse['hits']['total'],
        'results' => $parsedResponse['hits']['hits'],
        'requestedNumberOfResults' => $reqData['requestedNumberOfResults'],
        'expiration' => $newExpiration,
        'reqUrl' => $cache->data['reqUrl']
      ];

      cache_set($cid, $newPublicationData, 'cache_cu_faculty_publications_bundle');
      $newPublicationData['isFromCache'] = FALSE;
      return $newPublicationData;
    }
    // If the request failed still load from the cache but with a warning.
    else {
      $publicationData = $cache->data;
      $publicationData['messages']['publications'] = "<div style=\"float:left\" class=\"messages warning\">{$response->code}: There was a problem refreshing publication data. The results shown may not be the most up to date. Please check again later.</div>";
      $publicationData['isFromCache'] = TRUE;
      return $publicationData;
    }
  }

  // There is no cached data or $skipCache is TRUE. Build the elasticsearch request url using filter/field settngs.
  else {
    $reqData = build_request_data($beanObject);
    // If building the request url fails it returns an 'error'. Not an actual error, just somethine we will pass onto the user.
    if (isset($reqData['error'])) {
      return [
        'total' => NULL,
        'results' => NULL,
        'requestedNumberOfResults' => NULL,
        'error' => "<div style=\"float:left\" class=\"messages error\">{$reqData['error']}: There was a problem connecting to the experts 'people' database.</div>"
      ];
    }

    elseif (isset($reqData['warning'])) {
      return [
        'total' => NULL,
        'results' => NULL,
        'requestedNumberOfResults' => NULL,
        'error' => "<div style=\"float:left\" class=\"messages warning\">{$reqData['warning']}</div>"
      ];
    }

    else {
      $response = drupal_http_request($reqData['reqUrl']);

      if ($response->code == '200') {
        $parsedResponse = drupal_json_decode($response->data, TRUE);
        $newPublicationData = [
          'total' => $parsedResponse['hits']['total'],
          'results' => $parsedResponse['hits']['hits'],
          'requestedNumberOfResults' => $reqData['requestedNumberOfResults'],
          'numberOfResultsPerPage' => $reqData['numberOfResultsPerPage'],
          'expiration' => $newExpiration,
          'reqUrl' => $reqData['reqUrl'],
          'messages' => $reqData['messages']
        ];

        cache_set($cid, $newPublicationData, 'cache_cu_faculty_publications_bundle');
        $newPublicationData['isFromCache'] = FALSE;
        return $newPublicationData;
      }

      else {
        $publicationData = [
          'total' => $cache->data['total'],
          'results' => $cache->data['hits'],
          'requestedNumberOfResults' => $cache->data['requestedNumberOfResults'],
          'expiration' => $newExpiration,
          'reqUrl' => $cache->data['reqUrl'],
          'error' => "<div style=\"float:left\" class=\"messages error\">{$response->code}: There was a problem fetching publication data. Please check again later.</div>"
        ];
        return $publicationData;
      }
    }
  }
}

/**
 * This is where the request for elastic search is constructed.
 *
 * @param array $publicationData
 *   Results from either the cache or requesting experts.colorado.edu as returned by get_publication_data().
 *
 * @return array
 *   Returns an associative render array passed on to the user interface.
 */
function publish_data(array $publicationData) {
  $output = array();
  if (isset($publicationData['error'])) {
    $output['error'][]['#markup'] = $publicationData['error'];
  }

  else {
    if ($publicationData['messages']) {
      foreach ($publicationData['messages'] as $message) {
        $output['messages'][]['#markup'] = $message;
      }
    }

    if ($publicationData['results']) {
      $totalResults = $publicationData['total'] > $publicationData['requestedNumberOfResults'] ? $publicationData['requestedNumberOfResults'] : $publicationData['total'];
      pager_default_initialize($totalResults, $publicationData['numberOfResultsPerPage']);

      // Check if results are from cache.
      // Put in an HTML comment to confirm if results are from cache or not.
      $isFromCache = $publicationData['isFromCache'] ? "YES" : "NO";
      $output['publications'][]['#markup'] = "<!-- Publication data are from cache: $isFromCache -->";

      foreach ($publicationData['results'] as $item) {
        $output['publications'][]['#markup'] = theme('faculty_publication', $item['_source']);
      }

      $output['publications'][]['#markup'] = theme('pager');
    }

    else {
      $output['no_results'][]['#markup'] = '<h4>There are no results for your query. Please check your data filters and try again.</h4>';
    }
  }

  return $output;
}

/**
 * This is where the request for elastic search is constructed.
 *
 * @param object $beanObject
 *   This is the object containing all data passed in from the form.
 *
 * @return array
 *   Returns an associative array with data to pass back into get_publication_data().
 */
function build_request_data($beanObject) {
  $fisPubsEndpoint = variable_get('cu_faculty_publications_endpoint', 'https://experts.colorado.edu/es/fispubs-v1/publication/_search');
  $fisPeopleEndpoint = variable_get('cu_faculty_fis_endpoint', 'https://experts.colorado.edu/es/fis/_search');
  $numberOfResultsPerPage = 25;
  $requestedNumberOfResults = 10;
  $currentPage = pager_find_page();
  $arguments = array();
  $messages = array();

  if (!empty($beanObject->field_faculty_publication_date)) {
    $date1 = strtotime($beanObject->field_faculty_publication_date[LANGUAGE_NONE][0]['value']);
    $date2 = strtotime($beanObject->field_faculty_publication_date[LANGUAGE_NONE][0]['value2']);

    $date1 = date('Y-m-d', $date1);
    $date2 = date('Y-m-d', $date2);
    $arguments['q'][] = 'publicationDate:[' . $date1 . ' TO ' . $date2 . ']';
  }

  // Check for department id or name.
  if (!empty($beanObject->field_faculty_pub_department)) {
    $department = $beanObject->field_faculty_pub_department[LANGUAGE_NONE][0]['value'];

    // Search for a department id number.
    if (intval($department)) {
      $arguments['q'][] = "authors.organization.uri:*_$department";
    }

    // Use name as search term.
    // TODO: more string validation here?
    else {
      $arguments['q'][] = "authors.organization.name:$department";
    }
  }

  // Check for sort order.
  if (!empty($beanObject->field_faculty_publications_sort)) {
    $order = $beanObject->field_faculty_publications_sort[LANGUAGE_NONE][0]['value'];

    if ($order === "date-desc") {
      $arguments['sort'] = 'publicationDate:desc';
    }
    elseif ($order === "date-asc") {
      $arguments['sort'] = 'publicationDate:asc';
    }
  }

  // Gather emails from all sources.
  $authorEmails = array();

  if (!empty($beanObject->field_faculty_publication_email)) {
    $authorEmails = array_merge($authorEmails, get_array_from_field_data($beanObject->field_faculty_publication_email[LANGUAGE_NONE], 'email'));
  }

  if (!empty($beanObject->field_faculty_publication_name)) {
    $authorEmails = array_merge($authorEmails, get_array_from_field_data($beanObject->field_faculty_publication_name[LANGUAGE_NONE], 'value'));
  }

  if (!empty($beanObject->field_people_list_person_type)) {
    $tids = get_array_from_field_data($beanObject->field_people_list_person_type[LANGUAGE_NONE], 'tid');
    $authorEmails = array_merge($authorEmails, get_emails_assoc_with_jobs($tids));
  }

  $authorEmails = array_unique($authorEmails);
  // Call experts people database and search for author email addresses. Return an orcid for each mathcing email found there.
  $orcidResults = get_author_orcids($authorEmails, $fisPeopleEndpoint);

  if (isset($orcidResults['error']) || isset($orcidResults['warning'])) {
    return $orcidResults;
  }

  elseif (isset($orcidResults) && count($orcidResults['authorsNotFound']) > 0) {
    $messages['authorsNotFound'] = get_html_no_result_string($orcidResults['authorsNotFound'], 'publications');;
  }

  // Add all of the authors' orcids to arguments['q'] array if there are any.
  if (count($orcidResults['orcids']) > 0) {
    $orcids = $orcidResults['orcids'];
    $authorOrcidStringQuoted = form_query_string_from_array($orcids);
    $arguments['q'][] = "authors.orcid:$authorOrcidStringQuoted";
  }

  // Check for requestedNumberOfResults.
  if (!empty($beanObject->field_faculty_pub_results)) {
    $numberOfResults = $beanObject->field_faculty_pub_results[LANGUAGE_NONE][0]['value'];
    $offset = $currentPage * $numberOfResultsPerPage;
    $arguments['from'] = $offset;

    if ($numberOfResults === 'all') {
      // 10,000 search results is the default maximum amount of Elastic Search results.
      $requestedNumberOfResults = 10000;
    }

    elseif ($num = intval($numberOfResults)) {
      $requestedNumberOfResults = $num;
    }

    $arguments['size'] = $requestedNumberOfResults < $numberOfResultsPerPage ? $requestedNumberOfResults : $numberOfResultsPerPage;
  }

  // Convert all 'q' arguments to a string joined by ' AND ' operator.
  if (count($arguments['q']) > 1) {
    $arguments['q'] = implode(' AND ', $arguments['q']);
  }
  elseif (count($arguments['q']) === 1) {
    $arguments['q'] = $arguments['q'][0];
  }

  // Form the final request url.
  $elasticSearchRequest = url($fisPubsEndpoint, ['query' => $arguments]);
  return [
    'reqUrl' => $elasticSearchRequest,
    'requestedNumberOfResults' => $requestedNumberOfResults,
    'numberOfResultsPerPage' => $numberOfResultsPerPage,
    'messages' => $messages
  ];
}

function get_array_from_field_data($fieldArray, $fieldArrayFinalIdentifier) {
  return array_map(
    function ($data) use ($fieldArrayFinalIdentifier) {
      return strtolower($data[$fieldArrayFinalIdentifier]);
    },
  $fieldArray);
}

function get_author_orcids($authorEmailArray, $dbUrl) {
  if (count($authorEmailArray) == 0) {
    return;
  }

  $orcids = array();
  $authorEmailString = form_query_string_from_array($authorEmailArray);
  $queryArray = ['q' => "email:{$authorEmailString}"];
  $requestUrl = url($dbUrl, ['query' => $queryArray]);
  $emailResponse = drupal_http_request($requestUrl);

  if ($emailResponse->code == '200') {
    $emailResult = drupal_json_decode($emailResponse->data, TRUE);
    $data = $emailResult['hits']['hits'];
    // Get the orcids from each database hit.
    foreach ($data as $author) {
      $authorOrcid = $author['_source']['orcid'];
      $authorEmail = strtolower($author['_source']['email'][0]);
      if ($authorOrcid) {
        array_push($orcids, $authorOrcid);
        $index = array_search($authorEmail, $authorEmailArray);
        array_splice($authorEmailArray, $index, 1);
      }
    }
    $noResults = count($orcids) > 0 ? FALSE : TRUE;
  }

  else {
    return ['error' => $emailResponse->code];
  }

  if ($noResults) {
    return ['warning' => "There was no publication data found for the selected author(s)."];
  }

  else {
    return ['orcids' => $orcids, 'authorsNotFound' => $authorEmailArray];
  }
}

function form_query_string_from_array($arr) {
  $arrayQuoted = array_map(
    function ($data) {
      return "\"" . $data . "\"";
    },
  $arr);
  return '(' . implode(" OR ", $arrayQuoted) . ')';
}

function get_html_no_result_string($noResultArray, $label) {
  if (count($noResultArray) > 0 && $label) {
    $warningString = "<p style=\"margin: 0;\">No {$label} found for:</p><ul>";
    foreach ($noResultArray as $data) {
      $warningString .= "<li>$data.</li>";
    }
    $warningString .= "</ul>";
  }
  return $warningString ? $warningString : '';
}

function cu_faculty_publications_bundle_person_names() {
  $query = db_select('field_data_field_person_email', 'email');
  $query->join('field_data_field_person_first_name', 'fn', 'email.entity_id = fn.entity_id');
  $query->join('field_data_field_person_last_name', 'ln', 'email.entity_id = ln.entity_id');
  $query->addField('email', 'field_person_email_email', 'e_mail');
  $query->addField('fn', 'field_person_first_name_value', 'first_name');
  $query->addField('ln', 'field_person_last_name_value', 'last_name');
  $query->orderBy('last_name', 'ASC');
  $result = $query->execute();

  $facultyNamesAndEmails = [];
  foreach ($result as $record) {
    $firstName = $record->first_name;
    $lastName = $record->last_name;
    $email = strtolower($record->e_mail);
    $facultyNamesAndEmails[$email] = "$firstName $lastName";
  }

  return $facultyNamesAndEmails;
}

function get_emails_assoc_with_jobs($jobsTidArray) {
  $query = db_select('field_data_field_person_email', 'email');
  $query->join('field_data_field_person_job_type', 'job', 'job.entity_id = email.entity_id');
  $query->addField('email', 'field_person_email_email');
  $query->condition('job.field_person_job_type_tid', $jobsTidArray, 'IN');

  $result = $query->execute()->fetchCol();
  $emails = array_map(
    function ($email) {
      return strtolower($email);
    },
  $result);
  return $emails;
}

function cu_faculty_publications_sort() {
  return array('date-desc' => 'Newest to Oldest', 'date-asc' => 'Oldest to Newest');
}

function cu_faculty_publications_results() {
  return array('25' => '25', '50' => '50' , '100' => '100', 'all' => 'ALL');
}

/**
 * Implements hook_secure_permissions().
 *
 * Adding permissions for publications bundle.
 */
function cu_faculty_publications_bundle_secure_permissions($role) {
  $permissions = array(
    'anonymous user' => array(
      'view any faculty_publications bean',
    ),
    'authenticated user' => array(
      'view any faculty_publications bean',
    ),
    'administrator' => array(
      'create any faculty_publications bean',
      'delete any faculty_publications bean',
      'edit any faculty_publications bean',
      'view any faculty_publications bean',
    ),
    'developer' => array(
      'create any faculty_publications bean',
      'delete any faculty_publications bean',
      'edit any faculty_publications bean',
      'view any faculty_publications bean',
    ),
    'edit_my_content' => array(
      'view any faculty_publications bean',
    ),
    'edit_only' => array(
      'edit any faculty_publications bean',
      'view any faculty_publications bean',
    ),
    'site_editor' => array(
      'create any faculty_publications bean',
      'delete any faculty_publications bean',
      'edit any faculty_publications bean',
      'view any faculty_publications bean',
    ),
    'site_owner' => array(
      'create any faculty_publications bean',
      'delete any faculty_publications bean',
      'edit any faculty_publications bean',
      'view any faculty_publications bean',
    ),
  );

  if (isset($permissions[$role])) {
    return $permissions[$role];
  }
}

/**
 * Implements hook_flush_caches().
 */
function cu_faculty_publications_bundle_flush_caches() {
  return array('cache_cu_faculty_publications_bundle');
}
