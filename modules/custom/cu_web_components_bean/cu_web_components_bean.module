<?php

function cu_web_components_bean_library(){
    $libraries['ucb-vue-lib'] = array(
        'title' => 'UCB Vue Component Library',
        'website' => 'https://github.com/CuBoulder/vue3-sandbox',
        'version' => '1.0',
        'js' => array(
            libraries_get_path('vue') . '/vue.global.prod.js' => array('scope' => 'header'),
            libraries_get_path('vue') . '/dist/bundle.js' => array('scope' => 'footer', 'defer' => true)
        ),
        'css' => array(
            libraries_get_path('vue') . '/dist/ucbWebComponentLib.css' => array('scope' => 'header')
        )
    );
    return $libraries;
}

/**
 * Implements hook_page_alter().
 *
 */
function cu_web_components_bean_page_alter(&$page) {
    drupal_add_library('cu_web_components_bean', 'ucb-vue-lib');
}

/**
 * Implements hook_bean_types_api_info().
 */
function cu_web_components_bean_bean_types_api_info() {
  return array('api' => 4);
}

/*
* Ajax callback for the Bean config form
*/
function ajax_wc_data_options_callback($form, $form_state) {
    //dpm($form_state['input']['wc_name']);
    $selected_wc = $form_state['input']['wc_name'];
    // load the taxonomy terms and only show available options
    $vocabulary = taxonomy_vocabulary_machine_name_load('web_component_data_options');
    $terms = entity_load('taxonomy_term', FALSE, array('vid' => $vocabulary->vid));
    // sort the terms
    $arr =[];
    foreach($terms as $i){
        $wc = taxonomy_term_load(($i->field_web_component)['und'][0]['tid']);
        if($wc->name === $selected_wc){
            $arr[$i->tid] = $i->name;
        }
    }
    if(count($arr) === 0){
     $form['data_options']['#description'] = 'There are no data options for this web component';
     $form['data_options']['selected']['#options'] = ['default' => '-- WC Data Options --'];
    }
    else{
        $form['data_options']['#description'] = 'Please select what data you want to show from this data source.';
        $form['data_options']['wc_data_option']['#options'] = $arr;
    }
    return $form['data_options'];
}


/**
 * Implements hook_bean_types().
 * Bean appears in UI but cannot be edited
 */
function cu_web_components_bean_bean_types() {
  $plugins = array();
  $plugins['cu_web_components_bean'] = array(
  'label' => t('CU Web Component'),
  'description' => t('A list of web components created in Vue'),
  'handler' => array(
    'class' => 'CUWebComponent',
    'parent' => 'bean',
    'path' => drupal_get_path('module', 'cu_web_components_bean') . '/plugins/bean',
    'file' => 'CUWebComponent.class.php',
     ),
   );
  return $plugins;
}

/**
 * Implements hook_theme()
 * Create a new theme
 */
function cu_web_components_bean_theme($existing, $type, $theme, $path) {
  $theme = array();
  $theme['bean__cu_web_components_bean'] = array(
    'base hook' => 'bean',
    'template' => 'bean--cu_web_components_bean',
    'path' => drupal_get_path('module', 'cu_web_components_bean'),
    'variables' => ['api_endpoint' => NULL, 'wc_name' => NULL, 'resource_id' => NULL, 'wc_data_option' => NULL]
   );
  return $theme;
}
