<?php

/**
 * @file
 * Unit test cases for this module.
 */

// Mock data and functions.
$express_site_metrics_tokens = ['prometheus' => ['userId' => 'Prometheus']];
$express_site_metrics_secret = 'SECRET';

/**
 * Mocked implementation of variable_get().
 *
 * @param string $key
 *   Name of the entry in the variable DB table.
 * @param mixed $ifEmpty
 *   What is returned if no entry exists with the name of $key.
 *
 * @return mixed
 *   Returns either the DB entry for $key or null.
 */
function variable_get(string $key, $ifEmpty = NULL): mixed {
  global $_express_site_metrics_secret, $_express_site_metrics_tokens;
  if ($key === 'express_site_metrics_tokens') {
    return $_express_site_metrics_tokens;
  }

  elseif ($key === 'express_site_metric_secret') {
    return $_express_site_metrics_secret;
  }

  else {
    return NULL;
  }
}

/**
 * Mocked implementation of variable_set().
 *
 * @param string $key
 *   The name of the entry in the variable DB table.
 * @param array $value
 *   The value to save to the database. In this case an associative array.
 */
function variable_set(string $key, array $value) {
  global $_express_site_metrics_tokens;
  if ($key === 'express_site_metrics_tokens') {
    $_express_site_metrics_tokens = $value;
  }
}

/**
 * Unit tests for this module.
 */
class ExpressSiteMetricsTestCase extends DrupalUnitTestCase {

  private $tokenHandler;
  private $inspector;
  private $testTokens = [
    'good' => 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VySWQiOiJzb21lRG9Hb29kZXIifQ.jYmzAJ_RUVaBEFUu6EBQReMQuPm2IGY3Ln-XJlwlYG8',
    'bad' => 'eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJ1c2VySWQiOiJzb21lRG9Hb29kZXIifQ.1_s1082tpGO1OwFy_5boCHhXQNpxgk6KEreuAcq93hs',
  ];

  /**
   * Describe test suite.
   */
  public static function getInfo() {
    return [
      'name' => 'Simpletest Example unit tests',
      'description' => 'Test the SiteMetricsInspector class',
      'group' => 'express_site_metrics',
    ];
  }

  /**
   * Set up inspector and tokenhandler classes.
   */
  public function setUp() {
    require '../classes/express_site_metrics_instpector.php';
    require '../classes/express_site_metrics_token.php';

    $constructorObject = [
      'dbGet' => 'variable_get',
      'dbSet' => 'variable_set',
      'secret' => 'express_site_metrics_secret',
      'tokensDb' => 'express_site_metrics_tokens',
    ];

    $this->inspector = new SiteMetricsInspector();
    $this->tokenHandler = new TokenHandler($constructorObject);
  }

  /**
   * Test the tokenHandler->generate() method.
   */
  public function testTokenGenerate() {
    // Should return token -> xxxxx.xxxxx.xxxxxx.
    $newToken = $this->tokenHandler->generate('someDoGooder');

    $this->assertEqual($newToken, $this->testTokens['good']);
  }

  /**
   * Test the tokenhandler->validate() method.
   *
   * @return void
   */
  public function testTokenValidate() {
    $isAllowed = $this->tokenHandler->validate($testTokens['good']);
    $this->assertTrue($isAllowed, "This token should be successfully validated.");

    $isAllowed = $this->tokenHandler->validate($testTokens['bad']);
    $this->assertFalse($isAllowed, "This token should not be validated.");
  }

}
