<?php

/**
 * @file
 * Alters grouping in admin/modules using hook_system_info_alter
 */

/**
 * Implements hook_page_alter().
 *
 * @param $page
 */
function profile_module_manager_page_alter(&$page) {
  drupal_add_css(drupal_get_path('module', 'profile_module_manager'). '/css/profile-module-manager.css');
}

/**
 * Implementes hook_theme().
 */
function profile_module_manager_theme() {
  $registry = array();
  $template_dir = drupal_get_path('module', 'profile_module_manager') . '/templates';
  $registry['express_bundle'] = array(
    'template' => 'express-bundle',
    'path' => $template_dir,
    'render element' => 'elements',
  );
  return $registry;
}

/**
 * Implements hook_menu().
 *
 * @return mixed
 */
function profile_module_manager_menu() {
  // Admin/settings ui provided by express_admin or custom solution.
  $items['admin/settings/site-configuration/bundles'] = array(
    'title' => 'Enable Bundles',
    'description' => 'Enable Bundles for additional functionality',
    'page callback' => 'drupal_goto',
    'page arguments' => array('admin/settings/bundles/list'),
    'access arguments' => array('enable module bundles'),
    'weight' => 50,
  );

  if (variable_get('profile_module_manager_disable_enabling', 0) == 0) {

    $items['admin/settings/bundles/list'] = array(
      'title' => 'Configure Bundles',
      'description' => 'Enabled',
      'page callback' => 'profile_module_manager_list_bundles',
      'page arguments' => array(TRUE, NULL, NULL),
      'access arguments' => array('enable module bundles'),
    );

    $items['admin/settings/bundles/list/enabled'] = array(
      'title' => 'Enabled',
      'type' => MENU_DEFAULT_LOCAL_TASK,
      'weight' => -10
    );

    $items['admin/settings/bundles/list/available'] = array(
      'title' => 'Available',
      'type' => MENU_LOCAL_TASK,
      'description' => 'Add and request additional bundles',
      'page callback' => 'profile_module_manager_list_bundles',
      'page arguments' => array(FALSE, NULL, NULL),
      'access arguments' => array('enable module bundles'),
      'weight' => 10,
    );

    $items['admin/settings/bundles/list/enable/%'] = array(
      'title' => 'Enable Bundle',
      'description' => 'Enable a bundle.',
      'page callback' => 'profile_module_manager_bundle_enable',
      'page arguments' => array(5),
      'file' => 'profile_module_manager.admin.inc',
      'access arguments' => array('enable module bundles'),
    );

    $items['admin/settings/bundles/list/confirm/%'] = array(
      'title' => 'Confirm Enabling Bundle',
      'description' => 'Enable a bundle.',
      'page callback' => 'profile_module_manager_bundle_confirm',
      'page arguments' => array(5),
      'file' => 'profile_module_manager.admin.inc',
      'access arguments' => array('enable module bundles'),
    );

    $items['admin/settings/bundles/list/request/%'] = array(
      'title' => 'Bundle Request',
      'type' => MENU_CALLBACK,
      'page callback' => 'drupal_get_form',
      'page arguments' => array('profile_module_manager_request_bundle_form',5),
      'access arguments' => array('enable module bundles'),
    );

  }


  $items['admin/config/system/module-manager'] = array(
    'title' => 'Profile Module Manager',
    'description' =>  'Configure Module Manager',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('profile_module_manager_admin_settings'),
    'file' => 'profile_module_manager.admin.inc',
    'access arguments' => array('configure profile module manager'),
  );

  return $items;
}


/**
 * Implements hook_permission().
 *
 * @return array
 */
function profile_module_manager_permission() {
  return array(
    'enable module bundles' => array(
      'title' => t('Enable Module Bundles'),
      'description' => t('Enable module bundles without administer modules permission.'),
    ),
   'skip bundle request step' => array(
      'title' => t('Skip Request Step'),
      'description' => t('Enable module bundles that are configure to require a request.'),
    ),
    'configure profile module manager' => array(
      'title' => t('Configure Profile Module Manager'),
      'description' => t('Manage all bundles and access to UI.'),
    ),
  );
}

/**
 * Implements hook_system_info_alter().
 *
 * @param $info
 * @param $file
 * @param $type
 */
function profile_module_manager_system_info_alter(&$info, $file, $type) {

  if (!variable_get('profile_module_manager_disable_ui_lock', 0)) {
    require_once DRUPAL_ROOT . '/includes/install.inc';
    $profile = install_profile_info(drupal_get_profile());

    if($type == 'module' && in_array($file->name, $profile['dependencies'])) {
      $info['required'] = TRUE;
    }

    if ($type == 'module' && $file->name == variable_get('express_core_version', '')) {
      $info['required'] = TRUE;
    }
  }

}

/**
 * Returns an array of projects that are enabled, but not ignored.
 *
 * @return array
 */
function profile_module_manager_is_config_ideal(){
  $reality = module_list();
  $ideal = profile_module_manager_build_ideal();

  // Does the reality match the ideal?
  $diff1 = array_diff_assoc($reality, $ideal);
  $diff2 = array_diff_assoc($ideal, $reality);
  $diff = array_merge($diff1, $diff2);

  return $diff;
}

/**
 * Modifies profile_module_manager_ignore array.
 *
 * @param $new_ignore
 */
function profile_module_manager_add_to_ignore($new_ignore) {
  $current_ignore = variable_get('profile_module_manager_ignore', array());

  variable_set('profile_module_manager_ignore', array_merge($current_ignore, $new_ignore));
}

/**
 * Returns an array of bundles.
 *
 * @param string $status
 * @return mixed
 */
function profile_module_manager_get_bundles($status = 'all') {
  if ($status == 'all') {
    $bundles = db_query("SELECT name, filename, status FROM {system} WHERE type = 'module' ORDER BY weight ASC, name ASC")->fetchAllAssoc('name');
  }
  if ($status == 'enabled') {
    $bundles = db_query("SELECT name, filename, status FROM {system} WHERE type = 'module' AND status = 1 ORDER BY weight ASC, name ASC")->fetchAllAssoc('name');
  }

  foreach ($bundles as $key => $bundle) {
    if (!strpos($bundle->name, '_bundle')) {
      unset($bundles[$key]);
    }
    // @TODO find a better way to handle admin bundles
    // causes problems in admin/reports/status with profile_module_manager_build_ideal
    if (strpos($bundle->name, '_admin_bundle')) {
      unset($bundles[$key]);
    }
  }
  return $bundles;
}

/**
 * Returns an array of enabled core and hosting modules.
 *
 * @return array
 */
function profile_module_manager_get_additional_dependencies() {
  $cores = db_query("SELECT name, filename FROM {system} WHERE type = 'module' AND status = 1 AND name LIKE '%_core' ORDER BY weight ASC, name ASC")->fetchAllAssoc('name');
  $hosting = db_query("SELECT name, filename FROM {system} WHERE type = 'module' AND status = 1 AND name LIKE '%_hosting' ORDER BY weight ASC, name ASC")->fetchAllAssoc('name');

  return array_merge($cores, $hosting);
}

/**
 * Returns an array of core modules.
 *
 * @return array
 */
function profile_module_manager_build_ideal() {
  $new_ideal = array();
  require_once DRUPAL_ROOT . '/includes/install.inc';
  $profile_name = drupal_get_profile();
  $profile = install_profile_info($profile_name);

  // Start with the profile.
  $ideal = isset($profile['dependencies']) ? $profile['dependencies'] : array();
  $ignore = isset($profile['optional-dependencies']) ? $profile['optional-dependencies'] : array();

  // Add core dependencies to ideal and ignore arrays.
  $modules = profile_module_manager_get_additional_dependencies();
  foreach ($modules as $module) {
    // Could just replace .module w/ .info from $bundle->filename.
    // Which is faster?
    $path = drupal_get_path('module', $module->name) . '/' . $module->name . '.info';
    $info = drupal_parse_info_file($path);
    if (isset($info['dependencies'])) {
      $ideal = array_merge($ideal, $info['dependencies']);
    }
    if (isset($info['optional-dependencies'])) {
      $ignore = array_merge($ignore, $info['optional-dependencies']);
    }
    // Add the core or hosting module itself.
    $ideal[] = $module->name;
  }

  // Add enabled bundle dependencies to ideal and ignore arrays.
  $bundles = profile_module_manager_get_bundles('enabled');

  foreach($bundles as $bundle) {
    // could just replace .module w/ .info from $bundle->filename
    // which is faster?
    $path = drupal_get_path('module', $bundle->name) . '/' . $bundle->name . '.info';
    $info = drupal_parse_info_file($path);

    if (isset($info['dependencies'])) {
      $ideal = array_merge($ideal, $info['dependencies']);
    }
    if (isset($info['optional-dependencies'])) {
      $ignore = array_merge($ignore, $info['optional-dependencies']);
    }

    // and the bundle itself
    $ideal[] = $bundle->name;
  }

  // rebuild ideal so keys = value and ignore optional dependencies
  foreach ($ideal as $item) {
    $new_ideal[$item] = $item;
  }

  // add any ignored project to new_ideal
  foreach ($ignore as $item) {
    if (module_exists($item)) {
      $new_ideal[$item] = $item;
    }
  }


  // add the profile itself to the list
  $new_ideal[$profile_name] = $profile_name;

  return $new_ideal;
}

function profile_module_manager_process_batch($modules, &$context) {

  // Enable modules.
  module_enable($modules);

  // Pass bundle name to batch finished function.
  foreach ($modules as $module) {
    if (strpos($module, '_bundle')) {
      $context['results']['bundle'] = $module;
    }
  }
}

function profile_module_manager_batch_finished($success, $results, $operations) {
  if ($success) {
    // Get bundle name from $results and print message.
    $bundle_name = $results['bundle'];
    $bundle_path = drupal_get_path('module', $bundle_name);
    $bundle = drupal_parse_info_file($bundle_path . '/' . $bundle_name . '.info');
    drupal_set_message('The ' . $bundle['name'] . ' Bundle has been successfully enabled on your site. You may now begin using this functionality and go back to editing your site.');

    // Log bundle enable time.
    $start_time = variable_get('profile_module_manager_enable_timer', 0);
    $end_time = microtime(TRUE);
    $total_time = $end_time - $start_time;
    watchdog('profile_module_manager', '!bundle enable time: !time seconds.', array('!bundle' => $bundle['name'], '!time' => $total_time));
  } else {
    _revert_bundle_on_error();
  }
}

/**
 * Function to handle bundle enabling errors.
 */
function _revert_bundle_on_error() {

}

/**
 * Implements hook_modules_installed().
 * Run functions after bundles are enabled.
 */
function profile_module_manager_modules_enabled($modules) {
  foreach ($modules as $module) {
    // Only run these functions if module name includes _bundle
    if (strpos($module, '_bundle') !== false) {
      // Get the info file.
      $path = drupal_get_path('module', $module) . '/' . $module . '.info';
      $info = drupal_parse_info_file($path);

      // Rebuild node types.
      node_types_rebuild();

      // Clear caches.
      if (isset($info['bundle_cache_clear']) && $info['bundle_cache_clear']) {
        drupal_flush_all_caches();
      }
      if (isset($info['bundle_context_clear']) && $info['bundle_context_clear']) {
        drupal_flush_all_caches();
      }
    }
  }
}

function profile_module_manager_user_has_role($roles) {
  // Checks if user has role/roles.
  global $user;
  if ($user->uid == 1) {
    return TRUE;
  }
  return !!count(array_intersect(is_array($roles)? $roles : array($roles), array_values($GLOBALS['user']->roles)));
};

// @TODO: Make configurable

/**
 * Implements hook_form().
 *
 * Form for requesting a bundle.
 * This emails the request to a support email account for follow up.
 */
function profile_module_manager_request_bundle_form($form, &$form_state, $name) {
  $form = array();
  $name = check_plain($name);
  $form['confirmation'] = array(
    '#type' => 'markup',
    '#markup' => "<p>Are you sure you want to request the $name bundle be added to your site?</p>",
  );
  $form['bundle'] = array(
    '#type' => 'hidden',
    '#value' => $name,
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => 'Request Bundle',
    '#submit' => array(
      'profile_module_manger_send_request',
      'profile_module_manager_request_bundle_form_submit'
    ),
  );

  $form['cancel'] = array(
    '#type' => 'submit',
    '#value' => 'Cancel',
    '#submit' => array('profile_module_manager_request_bundle_form_cancel')
  );

  return $form;
}

/**
 * Email function to send support email when a bundle has been requested.
 */
function profile_module_manger_send_request($form, &$form_state) {
  global $base_url;
  global $user;
  $site_name = variable_get('site_name', 'Site name missing');
  $request_email = variable_get('profile_module_manager_request_bundle_email', 'websupport@colorado.edu');

  $from = $user->mail;
  $site_name = variable_get('site_name', '');
  $name = isset($user->realname) ? $user->realname : $user->name;
  $bundle = $form_state['values']['bundle'];
  $body = $name  . ' (' . $from . ') has requested the ' . $bundle  . ' for the ' . $site_name . ' website (' . $base_url .')';
  $params = array(
    'subject' => t('Bundle Request - ' . $bundle),
    'body' => $body,
  );

  drupal_mail('profile_module_manger', 'profile_module_manger_request_sent', $request_email, language_default(), $params, $from, TRUE);

}

/**
 * Implements hook_mail().
 */
function profile_module_manger_mail($key, &$message, $params) {
  switch ($key) {
    // Request email.
    case 'profile_module_manger_request_sent':
      $message['body'] = array();
      $message['body'][] = $params['body'];
      $message['subject'] = $params['subject'];
      break;
  }
}

/**
 * Submit function for cu_profile_module_manager_request_bundle_form().
 *
 * Notify user that request has been submitted and return them to bundle list.
 */
function profile_module_manager_request_bundle_form_submit($form, &$form_state) {
  drupal_set_message('Your bundle request has been sent.');
  drupal_goto('admin/settings/bundles/list');
}

/**
 * Cancel function for bundle request form.
 */
function profile_module_manager_request_bundle_form_cancel($form, &$form_state) {
  drupal_goto('admin/settings/bundles/list');
}

function profile_module_manager_list_bundles($enabled = FALSE, $type = NULL, $collection = NULL) {

  if (variable_get('disable_bundle_ui', 0)) {
    $message = variable_get('disable_bundle_ui_message', 'The bundle interface has been temporarily disabled.');
    $output['#markup'] = $message;
    return $output;
  }

  $output = array();

  // Get all bundles
  $bundles = profile_module_manager_get_bundles('all');

  // Filter bundle list based on whether we are displaying for enabled or avaiable.
  foreach ($bundles as $key => $bundle) {
    if($enabled != $bundle->status) {
      unset($bundles[$key]);
    }
  }

  if (count($bundles) == 0) {
    if ($enabled) {
      drupal_set_message(t("None of the available bundles have been enabled. Click the Available tab to see the list of bundles you can enable or request."), 'warning');
    } else {
      drupal_set_message(t("All available bundles have already been enabled."), 'warning');
    }
    return $output;
  }

  $output['bundles'] = array();
  $output['bundles']['#prefix'] = '<div class="express-cards">';
  $output['bundles']['#suffix'] = '</div>';

  //dsm($bundles);
  // Loop through bundles and evaluate how they should be displayed
  foreach ($bundles as $key => $bundle) {

    // Get content from .info file.
    $info_file = str_replace(".module", ".info", $bundle->filename);
    $info = drupal_parse_info_file($info_file);

    $request = !empty($info['bundle_request']) ? $info['bundle_request'] : 0;
    //dsm($request);
    // Build variables array for theming.
    $variables = array();

    $name = isset($info['name']) ? $info['name'] : $key;
    $name_lc = strtolower($name);
    $variables['name'] = $name;
    $variables['description'] = (isset($info['description']) ? $info['description'] : 'No description available.');

    // Users with the "skip bundle request step" permission can enable these
    // directly enable request bundles.
    // All other users have a request submitted to support email for follow up.
    if ($request && !user_access('skip bundle request step')) {
      $variables['enable_url'] = 'admin/settings/bundles/list/request/' . $name;
      $variables['enable_text'] = 'Request';
    }
    else {
      $variables['enable_url'] = 'admin/settings/bundles/list/confirm/' . $bundle->name;
      $variables['enable_text'] = 'Enable';
    }

    // Demo url
    if (!empty($info['project_demo_url'])) {
      $variables['demo_url'] = $info['project_demo_url'];
    }

    //dsm($variables);

    // Add classes for bundle group
    $variables['bundle_classes'][] = ($bundle->status) ? 'express-bundle-enabled' : 'express-bundle-disabled';
    $variables['bundle_classes'][] = $request ? 'express-bundle-request' : 'express-bundle-install';

    if (isset($info['bundle_roles']) && profile_module_manager_user_has_role($info['bundle_roles'])) {
      //dsm('test');
      $output['bundles']['list'][$name_lc]['#markup'] = theme('express_bundle', $variables);
    }

  }
  // Sort bundles alphabetically
  ksort($output['bundles']['list']);

  return $output;
}
