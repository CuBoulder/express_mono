<?php
/**
 * @file
 * Code for the Magazine feature.
 */

include_once 'cu_publication.features.inc';

function cu_publication_node_bundles($bundles) {
  $bundles['publications']['title'] = 'Publications';
  $bundles['publications']['types'][] = 'Issue';
  return $bundles;
}

/**
 * Implements hook_page_alter().
 * Add newsletter css
 */
function cu_publication_page_alter(&$page) {
  drupal_add_css(drupal_get_path('module', 'cu_publication') . '/css/cu-publication.css');

  // Place publication logo in intro region
  if (variable_get('cu_publication_logo', NULL)) {
    // Load logo file to get dimensions
    $custom_logo = file_load(variable_get('cu_publication_logo', ''));
    $custom_logo_markup = '<img class="publication-logo" src="' . file_create_url($custom_logo->uri) . '" alt="' . variable_get('cu_publication_name', ' ') . '" />';
    $logo_link = variable_get('cu_publication_path', '<front>');
    $custom_logo_markup = l($custom_logo_markup, $logo_link, array('html' => TRUE));
    $pubname = array();
    $pubname['pubname']['#markup'] = '<div class="publication-name col-lg-12">' . $custom_logo_markup . '</div>';
    $pubname['pubname']['#prefix'] = '<div class="publication-name-wrapper"><div class="publication-name-inner element-max-width">';
    $pubname['pubname']['#suffix'] = '</div></div>';
    $pubname['pubname']['#weight'] = -1000;

    if (!empty($page['intro'])) {
      $page['intro'] = array('one' => $pubname) + $page['intro'];
    } else {
      $page['intro'] = $pubname;
    }
  }
}

/**
 * Implements module_preprocess_hook().
 */
function cu_publication_preprocess_node(&$vars) {
  if ($vars['node']->type == 'article') {
    $nid = $vars['node']->nid;
    // Query field collection issue_section_articles
    $query = db_select('field_data_field_issue_section_articles', 'articles');
    // Join to field_issue_section to get nid that field collection is attached to
    $query->join('field_data_field_issue_section', 'section', 'articles.entity_id = section.field_issue_section_value');
    $query->condition('field_issue_section_articles_target_id', $nid, '=');
    $query->fields('section', array('entity_id'));
    $results = $query->execute()->fetchCol();
    // If there's a result, load node and construct issue meta section
    if ($results) {
      $links = array();
      foreach ($results as $result) {
        $issue_node = node_load($result);
        $links[] = l($issue_node->title, 'node/' . $result);
      }
      $markup = '<i class="fa fa-book"></i><span class="element-invisible">Issue:</span> ' . join(', ', $links);

      $vars['content']['article_meta']['article_issue']['#markup'] = $markup;
      $vars['content']['article_meta']['article_issue']['#prefix'] = '<div class="article-meta-section article-meta-issue">';
      $vars['content']['article_meta']['article_issue']['#suffix'] = '</div>';
      $vars['content']['article_meta']['article_issue']['#weight'] = -1000;
    }
  }
}


/**
 * Implements module_preprocess_hook().
 * Build article sections.
 */
function cu_publication_preprocess_entity(&$vars) {
  $entity_type = $vars['elements']['#entity_type'];
  $bundle = $vars['elements']['#bundle'];
  // Only process newsletter sections.
  if ($entity_type == 'field_collection_item' && $bundle == 'field_issue_section') {
    $view_mode = $vars['content']['field_issue_section_display'][0]['#markup'];
    $nids = array();
    foreach ($vars['content']['field_issue_section_articles']['#items'] as $key => $value) {
      $nids[$key] = $value['target_id'];
    }
    $nodes = node_load_multiple($nids);
    foreach ($nodes as $key => $node) {
      // Set node title markup.
      $nodes[$key]->heading_tag['#tag'] = 'h3';
    }
    // Render articles.
    $vars['content']['articles'] = node_view_multiple($nodes, $view_mode);
    $vars['content']['articles']['#weight'] = 1;
    $vars['content']['articles']['#prefix'] = '<div class="issue-section-contents">';
    $vars['content']['articles']['#suffix'] = '</div>';
    // Remove entity references and display settings from output.
    unset($vars['content']['field_issue_section_display']);
    unset($vars['content']['field_issue_section_articles']);
  }
}

/**
 * Implements hook_theme_registry_alter().
 */
function cu_publication_theme_registry_alter(&$theme_registry) {
  $module_path = drupal_get_path('module', 'cu_publication');
  $theme_registry_copy = $theme_registry;
  _theme_process_registry($theme_registry_copy, 'phptemplate', 'theme_engine', 'node', $module_path);
  $theme_registry += array_diff_key($theme_registry_copy, $theme_registry);
  $hooks = array('node');
  foreach ($hooks as $h) {
    if (isset($theme_registry[$h]['theme paths'])) {
      $first_element = array_shift($theme_registry[$h]['theme paths']);
      array_unshift($theme_registry[$h]['theme paths'], array_shift($theme_registry[$h]['theme paths']), $module_path);
    }
  }
}

/**
 * Implements hook_node_update().
 * Publish all referenced nodes.
 */
function cu_publication_node_insert($node) {
  _cu_publication_publish_nodes($node);
}

/**
 * Implements hook_node_update().
 * Publish all referenced nodes.
 */
function cu_publication_node_update($node) {
  _cu_publication_publish_nodes($node);
}

/**
 * Publish all referenced nodes.
 */
function _cu_publication_publish_nodes($node) {
  // If an issue node is published, publish all referenced articles.
  if (($node->type == 'issue') && ($node->status == 1)) {
    $status = $node->status;
    $nids = array();
    // Go through each section.
    foreach ($node->field_issue_section[LANGUAGE_NONE] as $item) {
      $item = entity_load('field_collection_item', array($item['value']));
      $item = current($item);
      // Get all node ids for each section
      foreach ($item->field_issue_section_articles[LANGUAGE_NONE] as $article) {
        $nids[] = $article['target_id'];
      }
    }
    // Set referenced nodes to published
    foreach ($nids as $nid) {
      $node_reference = node_load($nid);
      if ($node_reference->status == 0) {
        $node_reference->status = 1;
        node_save($node_reference);
        $message = t('%title is now published',
          array(
            '%title' => $node_reference->title,
          )
        );
        drupal_set_message($message);
      }
    }
  }
}
/**
 * Allowed values function for field_newsletter_display.
 */
function _cu_publication_display_values() {
  return array(
    'teaser_category' => 'Teaser',
    'feature_category' => 'Feature',
    'sidebar' => 'Title and Thumbnail',
    'title' => 'Title',
  );
}

/**
 * Implements hook_menu().
 */
function cu_publication_menu() {
  // Publication Configs
  $items['admin/config/system/publication/settings'] = array(
    'title' => 'Publication Settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cu_publication_upload_form'),
    'access arguments' => array('administer themes'),
    'weight' => 8,
    'description' => 'Upload publication logo.',
  );
  // Current issue
  $items['issue/current'] = array(
    'access callback' => TRUE,
    'title' => 'Current Issue',
    'page callback' => 'cu_publication_current_issue',
  );
  // Issue archives
  if ($path = variable_get('cu_publication_archive_path', NULL)) {
    $name = variable_get('cu_publication_name', NULL) ? variable_get('cu_publication_name', NULL) . ' Archives' : 'Archives';

    $items[$path] = array(
      'access callback' => TRUE,
      'title' => $name,
      'page callback' => 'cu_publication_issue_archive',
    );
    $items['issue/archive'] = array(
      'access callback' => TRUE,
      'title' => $name,
      'page callback' => 'drupal_goto',
      'page arguments' => array($path),
    );
  } else {
    $items['issue/archive'] = array(
      'access callback' => TRUE,
      'title' => 'Archives',
      'page callback' => 'cu_publication_issue_archive',
    );
  }
  return $items;
}
/**
 * Implements hook_form().
 * Upload publication logo, set publication name.
 */
function cu_publication_upload_form($form, &$form_state) {
  $form['cu_publication_logo'] = array(
    '#type' => 'managed_file',
    '#name' => 'custom_white_logo',
    '#title' => t('Publication Flag'),
    '#size' => 40,
    '#description' => t('Image should be a transparent png which will be displayed on a dark background. This flag will appear on every page of the site.'),
    '#upload_location' => 'public://publication_logo/',
    '#default_value' => variable_get('cu_publication_logo', ''),
  );
  // Show archive path if name is set
  $path = variable_get('cu_publication_archive_path', '');
  global $base_url;
  if ($path) {
    $path = l($base_url . '/' . $path, $path);
  } else {
    $path = l($base_url . '/issue/archive', $path . 'issue/archive');
  }
  $form['cu_publication_name'] = array(
    '#type' => 'textfield',
    '#title' => 'Publication Name',
    '#description' => 'Enter the publication name in this field if the publication is part of a larger site. This will be used in breadcrumbs and archive pages.',
    '#default_value' => variable_get('cu_publication_name', ''),
  );
  $form['cu_publication_path'] = array(
    '#type' => 'textfield',
    '#title' => 'Publication Landing Page',
    '#description' => 'Enter the path of the publication landing page in this field if the publication is part of a larger site. This will be used in breadcrumbs.',
    '#default_value' => variable_get('cu_publication_path', ''),
  );
  $form['cu_publication_archive_path'] = array(
    '#type' => 'textfield',
    '#title' => 'Publication Archive Path',
    '#description' => 'Enter the url path for the publication archive. Leave blank for the default archive path. ' . $path,
    '#default_value' => variable_get('cu_publication_archive_path', ''),
  );
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save Settings'),
  );
  // Add validation and submit functions
  $form['#validate'][] = 'cu_publication_upload_form_validate';
  $form['#submit'][] = 'cu_publication_upload_form_submit';
  return $form;
}

/**
 * Validation function for cu_publication_upload_form.
 * Publication name is required if logo is used.
 */
function cu_publication_upload_form_validate($form, &$form_state) {
  if (isset($form_state['values']['cu_publication_logo']) && empty($form_state['values']['cu_publication_name'])) {
    //form_set_error('cu_publication_name', t('A publication name is required if you are using a publication logo.'));
  }
}

function cu_publication_upload_form_submit($form, &$form_state) {
  // logo remove.
  if ($form_state['values']['cu_publication_logo'] == 0 || $form_state['values']['cu_publication_logo'] == 'remove') {
    $cu_publication_logo = variable_get('cu_publication_logo', FALSE);
    if ($cu_publication_logo) {
      $cu_publication_logo = file_load($cu_publication_logo);
      file_delete($cu_publication_logo, TRUE);
      variable_del('cu_publication_logo');
      drupal_set_message(t('Publication logo has been removed.'), 'status', FALSE);
    }
  }
  // logo upload.
  elseif (isset($form_state['values']['cu_publication_logo'])) {
    $cu_publication_logo = file_load($form_state['values']['cu_publication_logo']);

    file_usage_add($cu_publication_logo, 'cu_publication', 'cu_publication_logo', 1, 1);
    variable_set('cu_publication_logo', $form_state['values']['cu_publication_logo']);
    drupal_set_message(t('Publication logo has been added.'), 'status', FALSE);
  }
  // Set/Delete publication name/archive path
  if (!empty($form_state['values']['cu_publication_name'])) {
    variable_set('cu_publication_name', $form_state['values']['cu_publication_name']);
    drupal_set_message(t('Publication name has been saved.'), 'status', FALSE);
  } else {
    variable_del('cu_publication_name');
    drupal_set_message(t('Publication name has been deleted.'), 'status', FALSE);
  }
  if (!empty($form_state['values']['cu_publication_path'])) {
    variable_set('cu_publication_path', $form_state['values']['cu_publication_path']);
    drupal_set_message(t('Publication path has been saved.'), 'status', FALSE);
  } else {
    variable_del('cu_publication_path');
    drupal_set_message(t('Publication path has been deleted.'), 'status', FALSE);
  }
  // Set/Delete publication name/archive path
  if (!empty($form_state['values']['cu_publication_archive_path'])) {
    module_load_include('inc', 'pathauto', 'pathauto');
    $publication_path = pathauto_cleanstring($form_state['values']['cu_publication_archive_path']);
    variable_set('cu_publication_archive_path', $publication_path);
    drupal_set_message(t('Publication archive path has been saved.'), 'status', FALSE);
  } else {
    variable_del('cu_publication_archive_path');
    drupal_set_message(t('Publication archive path has been deleted.'), 'status', FALSE);
  }
  // Each time the name/path is changed, the menu needs to be rebuilt.
  menu_rebuild();
}

/**
 * Page callback function for issue/current.
 * Go to latest published issue.
 */
function cu_publication_current_issue() {
  $query = db_select("node", "n") // select from the node table
    ->fields("n", array("nid", "title")) // fields nid, title
    ->condition("type", "issue", "=") // where the node type = page
    ->condition('n.status', 1, '=') // node is published
    ->orderBy("created", "DESC") // order by the newest
    ->range(0, 1) // select only 10 records
    ->execute(); // execute the query

  while($record = $query->fetchAssoc()) {
    drupal_goto('node/' . $record['nid']);
  }
}

/**
 * Implements hook_block_info().
 */
function cu_publication_block_info() {
  $blocks['current_issue'] = array(
    'info' => t('Current Issue'),
  );
  $blocks['latest_issues'] = array(
    'info' => t('Latest Issues'),
  );
  $blocks['story_issue'] = array(
    'info' => t('Story Issue'),
  );
  $blocks['category_cloud'] = array(
    'info' => t('Category Cloud'),
  );
  $blocks['tag_cloud'] = array(
    'info' => t('Tag Cloud'),
  );
  $blocks['related_articles'] = array(
    'info' => t('Related Articles'),
  );
  return $blocks;
}

/**
 * Implements hook_block_view().
 */
function cu_publication_block_view($delta = '') {
  switch ($delta) {
    case 'current_issue':
      $block['subject'] = 'Current Issue';
      // Get current issue
      $query = db_select('node', 'n');
      $query->condition('n.type', 'issue', '=');
      $query->condition('n.status', 1, '=');
      $query->fields('n', array('nid', 'title'));
      $query->range(0, 1);
      $query->orderBy('created', 'DESC');
      $nid = $query->execute()->fetchCol();
      $nid = current($nid);
      $node = node_load($nid);

      // Render issue with grid view mode
      $content['view_issue'] = node_view($node, 'grid');
      $content['view_issue']['#prefix'] = '<div class="current-issue">';
      $content['view_issue']['#suffix'] = '</div>';
      $block['content'] = $content;
      break;

    case 'latest_issues':
      $block['subject'] = 'Latest Issues';
      // Get latest issues. Need 4, but ask for 5 to see if archive link is needed.
      $query = db_select('node', 'n');
      $query->condition('n.type', 'issue', '=');
      $query->condition('n.status', 1, '=');
      $query->fields('n', array('nid', 'title'));
      $query->range(0, 5);
      $query->orderBy('created', 'DESC');
      $nids = $query->execute()->fetchCol();
      // If there is more than 4, remove 5th node and show archive link.
      if (count($nids) > 4) {
        array_pop($nids);
        $show_archive = TRUE;
      }
      $nodes = node_load_multiple($nids);
      $issue_count = 1;
      // Render nodes with grid view mode.
      $content['latest_issues'] = node_view_multiple($nodes, 'grid');
      $content['latest_issues']['#prefix'] = '<div class="latest-issues">';
      $content['latest_issues']['#suffix'] = '</div>';
      // Archive link
      if ($show_archive) {
        $content['archive_link']['#markup'] = l('Issue Archive', 'issue/archive', array('attributes' => array('class' => array('button-ghost'))));
        $content['archive_link']['#prefix'] = '<div class="issue-archive-link">';
        $content['archive_link']['#suffix'] = '</div>';
      }
      $block['content'] = $content;
      break;

    case 'story_issue':
      $block['subject'] = '';
      // Get nid of current article
      if ($node = menu_get_object()) {
        $nid = $node->nid;
        // Query field collection to see if article is part of an issue
        $query = db_select('field_data_field_issue_section_articles', 'articles');
        // Join to field_issue_section to get nid that field collection is attached to
        $query->join('field_data_field_issue_section', 'section', 'articles.entity_id = section.field_issue_section_value');
        $query->condition('field_issue_section_articles_target_id', $nid, '=');
        $query->fields('section', array('entity_id'));
        $query->range(0, 1);
        //$query->orderBy('created', 'DESC');
        $results = $query->execute()->fetchCol();
        // If there's a result, load node and construct issue meta section
        if ($results) {
          $issue_node = node_load($results[0]);
          $cover_image = $issue_node->field_issue_image[LANGUAGE_NONE][0]['uri'];
          $img_url = image_style_url('small_thumbnail', $cover_image);
          $link = l('Read more from this issue <i class="fa fa-arrow-right"></i>', 'node/' . $issue_node->nid, array('html' => TRUE));
          $block['content']['story_issue']['#markup'] = '<img src="' . $img_url . '" alt="cover image"/> <div class="story-issue-link"><h3>' . $issue_node->title .'</h3>' . $link . '</div>';
          $block['content']['story_issue']['#prefix'] = '<div class="clearfix story-issue ">';
          $block['content']['story_issue']['#suffix'] = '</div>';

        }
      }

      break;
    case 'tag_cloud':
      $term_links = _cu_publication_get_term_links('tags');
      $block['subject'] = 'Article Tags';
      $block['content']['cloud']['#markup'] = join(' ', $term_links);
      break;
    case 'category_cloud':
      $term_links = _cu_publication_get_term_links('category');
      $block['subject'] = 'Article Categories';
      $block['content']['cloud']['#markup'] = join(' ', $term_links);
      break;
    case 'related_articles':
      $related_articles = array();
      // Get current node
      if (($node = menu_get_object()) && $node->type =='article') {
        $current_nid = $node->nid;
        // Get categories from current article
        $category_terms = $node->field_article_categories[LANGUAGE_NONE];
        $categories = array();
        if (!empty($category_terms)) {
          foreach ($category_terms as $category_term) {
            $tid = $category_term['tid'];
            $categories[$tid] = $tid;
          }
        }
        // Get tags from current article
        $tag_terms = array();
        if (!empty($node->field_tags)) {
          $tag_terms = $node->field_tags[LANGUAGE_NONE];
        }
        $tags = array();
        if (!empty($tag_terms)) {
          foreach ($tag_terms as $tag_term) {
            $tid = $tag_term['tid'];
            $tags[$tid] = $tid;
          }
        }
        // Start queries
        // Categories + Tags = most related
        // Just categories = second most related
        // Just tags = third most related
        // Query #1 - Categories AND Tags
        if (!empty($categories) && !empty($tags)) {
          $query = db_select('node', 'n');
          $query->condition('n.type', 'article', '=');
          $query->condition('n.status', 1, '=');
          $query->fields('n', array('nid', 'title'));
          // Don't include current article
          $query->condition('n.nid', $current_nid, '!=');
          // Query for categories
          $query->join("field_data_field_article_categories", "cats", "n.nid = cats.entity_id");
          $query->fields('cats', array('field_article_categories_tid'));
          $query->condition('cats.field_article_categories_tid', $categories, 'in');
          // Query for tags
          $query->join("field_data_field_tags", "tags", "n.nid = tags.entity_id");
          $query->fields('tags', array('field_tags_tid'));
          $query->condition('tags.field_tags_tid', $tags, 'in');
          // Get results
          $results = $query->execute()->fetchCol();
          // Count occurances of node id - more occurances = more related
          $occurences = array_count_values($results);
          // Sort by occurances
          arsort($occurences);
          // Add node ids to related articles array
          foreach ($occurences as $key => $occurence) {
            $related_articles[$key] = $key;
          }
        }

        // Query #2 - Categories
        if (!empty($categories)) {
          $query = db_select('node', 'n');
          $query->condition('n.type', 'article', '=');
          $query->condition('n.status', 1, '=');
          $query->fields('n', array('nid', 'title'));
          // Don't include current article
          $query->condition('n.nid', $current_nid, '!=');
          // Query for categories
          $query->join("field_data_field_article_categories", "cats", "n.nid = cats.entity_id");
          $query->fields('cats', array('field_article_categories_tid'));
          $query->condition('cats.field_article_categories_tid', $categories, 'in');
          // Get results
          $results = $query->execute()->fetchCol();
          // Count occurances of node id - more occurances = more related
          $occurences = array_count_values($results);
          // Sort by occurances
          arsort($occurences);
          // Add node ids to related articles array
          foreach ($occurences as $key => $occurence) {
            $related_articles[$key] = $key;
          }
        }

        // Query #3 - Tags
        if (!empty($tags)) {
          $query = db_select('node', 'n');
          $query->condition('n.type', 'article', '=');
          $query->condition('n.status', 1, '=');
          $query->fields('n', array('nid', 'title'));
          // Don't include current article
          $query->condition('n.nid', $current_nid, '!=');
          // Query for tags
          $query->join("field_data_field_tags", "tags", "n.nid = tags.entity_id");
          $query->fields('tags', array('field_tags_tid'));
          $query->condition('tags.field_tags_tid', $tags, 'in');
          // Get results
          $results = $query->execute()->fetchCol();
          // Count occurances of node id - more occurances = more related
          $occurences = array_count_values($results);
          // Sort by occurances
          arsort($occurences);
          // Add node ids to related articles array
          foreach ($occurences as $key => $occurence) {
            $related_articles[$key] = $key;
          }
        }
        // If there are related articles, show the top 3.
        if (!empty($related_articles)) {
          $top_related = array_slice($related_articles, 0, 3, TRUE);
          $nodes = node_load_multiple($top_related);
          $block['content']['articles'] = node_view_multiple($nodes, 'grid');
          unset($block['content']['articles']['nodes']['#sorted']);
          foreach($block['content']['articles']['nodes'] as $key => $node) {
            $block['content']['articles']['nodes'][$key]['#prefix'] = '<div class="related-article col-lg-4 col-md-4 col-sm-4 col-xs-12">';
            $block['content']['articles']['nodes'][$key]['#suffix'] = '</div>';
          }
          $block['content']['articles']['#prefix'] = '<div class="related-articles row">';
          $block['content']['articles']['#suffix'] = '</div>';
          $block['subject'] = 'Related Articles';
        }
      }
  }
  return $block;
}
function _cu_publication_get_term_links($vocab_name) {
  $vocab = taxonomy_vocabulary_machine_name_load($vocab_name);
  // Get the vocabulary ID.
  $vid = $vocab->vid;

  $result = db_select('taxonomy_term_data', 'term')
  ->fields('term', array('tid', 'vid', 'name'))
  ->orderBy('term.name', 'ASC')
  ->condition('term.vid', $vid, '=')
  ->execute();
  $tids = array();
  // Build array for loading terms
  foreach ($result as $row) {
    $tids[$row->tid] = $row->tid;
  }
  // Load terms
  $terms = taxonomy_term_load_multiple($tids);
  $term_links = array();
  foreach($terms as $term) {
    // if terms are tags
    if ($vocab_name == 'tags') {
      // Hide terms that are set to hide
      if (!empty($term->field_tag_display) && $term->field_tag_display[LANGUAGE_NONE][0]['value'] != 'hide') {
        $term_links[] = l($term->name, 'taxonomy/term/' . $term->tid, array('attributes' => array('class' => array('button-ghost', 'button-small'))));
      }
    }
    // If terms are categories
    if ($vocab_name == 'category') {
      // Hide terms that are set to hide
      if (!empty($term->field_category_display) && $term->field_category_display[LANGUAGE_NONE][0]['value'] != 'hide') {
        $term_links[] = l($term->name, 'taxonomy/term/' . $term->tid, array('attributes' => array('class' => array('button-ghost', 'button-small'))));
      }
    }
  }
  return $term_links;
}
/**
 * Page callback function for issue archives
 */
function cu_publication_issue_archive() {
  $query = db_select('node', 'n');
  $query->condition('n.type', 'issue', '=');
  $query->condition('n.status', 1, '=');
  $query->fields('n', array('nid', 'title'));
  $query = $query->extend('PagerDefault')->limit(12);
  $query->orderBy('created', 'DESC');
  $nids = $query->execute()->fetchCol();
  $nodes = node_load_multiple($nids);
  $output['articles'] = node_view_multiple($nodes, 'grid');
  $output['articles']['#weight'] = 99;
  $output['articles']['#prefix'] = '<div class="latest-issues">';
  $output['articles']['#suffix'] = '</div>';
  $output['pager'] = array(
        '#theme' => 'pager',
        '#tags' => array(),
        '#weight' => 100.
  );
  return $output;
}

/**
 * Implements hook_menu_breadcrumb_alter().
 * Add issue to breadcrumbs if article is part of an issue.
 */
function cu_publication_menu_breadcrumb_alter(&$active_trail, $item) {
  if (($item['map'][0] == 'node') && ($item['map'][1]->type == 'article')) {
    $nid = $item['map'][1]->nid;
    // Query field collection issue_section_articles
    $query = db_select('field_data_field_issue_section_articles', 'articles');
    // Join to field_issue_section to get nid that field collection is attached to
    $query->join('field_data_field_issue_section', 'section', 'articles.entity_id = section.field_issue_section_value');
    $query->condition('field_issue_section_articles_target_id', $nid, '=');
    $query->fields('section', array('entity_id'));
    $query->range(0,1);
    $results = $query->execute()->fetchCol();
    // If there's a result, load node and build breadcrumbs
    if ($results) {
      // Remove current breadcrumb
      $current_crumb = array_pop($active_trail);

      if (variable_get('cu_publication_path', NULL) && variable_get('cu_publication_name', NULL)) {
        $active_trail[] = array(
          'title' => variable_get('cu_publication_name', NULL),
          'href' => variable_get('cu_publication_path', NULL),
          'localized_options' => array(),
        );
      }

      // Load issue node
      $issue_id = current($results);
      $issue_node = node_load($issue_id);
      // Add issue breadcrumb
      $active_trail[] = array(
        'title' => $issue_node->title,
        'href' => 'node/' . $issue_id,
        'localized_options' => array(),
      );
    }
  }
  // Add pubication landing page to issue node breadcrumbs
  if (($item['map'][0] == 'node') && ($item['map'][1]->type == 'issue')) {
    if (variable_get('cu_publication_path', NULL) && variable_get('cu_publication_name', NULL)) {
      // Remove current breadcrumb
      $current_crumb = array_pop($active_trail);

      $active_trail[] = array(
        'title' => variable_get('cu_publication_name', NULL),
        'href' => variable_get('cu_publication_path', NULL),
        'localized_options' => array(),
      );
    }
  }
}
