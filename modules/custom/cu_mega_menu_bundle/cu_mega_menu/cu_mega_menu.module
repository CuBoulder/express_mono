<?php

/**
 * Implements hook_form_alter().
 */
function cu_mega_menu_form_menu_edit_item_alter(&$form, $form_state) {
  // Doing it this way just in case this should be added to node forms later on
  // Inspired by menu_attributes module.
  $item = $form['original_item']['#value'];
  if ($item['menu_name'] == 'main-menu' && $item['plid'] == 0) {
    _cu_mega_menu_form_alter($form, $form, $item);
    $path = $item['link_path'];
    $parent = menu_link_get_preferred($path);
    $parameters = array(
        'active_trail' => array($parent['plid']),
        'only_active_trail' => FALSE,
        'min_depth' => $parent['depth']+1,
        'max_depth' => $parent['depth']+1,
        'conditions' => array('plid' => $parent['mlid']),
      );

    $children = menu_build_tree($parent['menu_name'], $parameters);
  }
}

/**
 * Implements hook_form_alter().
 */
function _cu_mega_menu_form_alter(array &$form, array &$complete_form, array $item = array()) {
  $form['attributes']['mega_menu'] = array(
    '#type' => 'fieldset',
    '#title' => 'Mega Menu',
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['attributes']['mega_menu']['mega_menu_enable'] = array(
    '#type' => 'checkbox',
    '#title' => t('Enable mega menu on this menu item'),
    '#default_value' => isset($item['options']['mega_menu_enable']) ? $item['options']['mega_menu_enable'] : 0,
  );
  $mega_menus = entity_load('cu_mega_menu');
  $options = array();
  foreach ($mega_menus as $id => $mega_menu) {
    $options[$id] = $mega_menu->title;
  }
  $saved_value = '';
  if (!empty($item['options']['mega_menu_reference'])) {
    $mm_id = $item['options']['mega_menu_reference'];
    if (entity_load('cu_mega_menu', array($mm_id))) {
      $saved_value = $mm_id;
    }
  }
  $form['attributes']['mega_menu']['mega_menu_reference'] = array(
    '#type' => 'select',
    '#title' => t('Choose a Mega Menu to associate with this link.'),
    '#default_value' => $saved_value,
    '#options' => $options,
    "#empty_option"=>t('- None -'),

  );

  $form['#submit'][] = 'cu_mega_menu_edit_link_form_submit';
}

function cu_mega_menu_edit_link_form_submit($form, &$form_state) {
  $item = &$form_state['values'];
  $item['options']['mega_menu_enable'] = $item['mega_menu_enable'];
  $item['options']['mega_menu_reference'] = $item['mega_menu_reference'];
  list($item['menu_name'], $item['plid']) = explode(':', $item['parent']);
  if (!menu_link_save($item)) {
    drupal_set_message(t('There was an error saving the menu item.'), 'error');
  }
  else {
    drupal_set_message(t('The menu item configuration has been saved.'));
  }
  $form_state['redirect'] = 'admin/structure/menu/manage/' . $item['menu_name'];
}

function cu_mega_menu_theme(&$existing, $type, $theme, $path) {
  $registry = array();
  $template_dir = drupal_get_path('module', 'cu_mega_menu') . '/templates';
  $registry['cu_mega_menu'] = array(
    'template' => 'cu-mega-menu-wrapper',
    'path' => $template_dir,
  );

  return $registry;
}

/**
 * Implements hook_theme_registry_alter().
 *
 * Let Drupal know that we've got bean--cu-slider.tpl.php in our module directory.
 */
function cu_mega_menu_theme_registry_alter(&$theme_registry) {
  $module_path = drupal_get_path('module', 'cu_mega_menu');
  $template_file_objects = drupal_find_theme_templates($theme_registry, '.tpl.php', $module_path);
  // Iterate through all found template file objects.
  foreach ($template_file_objects as $key => $template_file_object) {
    // If the template has not already been overridden by a theme.
    if (!isset($theme_registry[$key]['theme path']) || !preg_match('#/themes/#', $theme_registry[$key]['theme path'])) {
      // Alter the theme path and template elements.
      $theme_registry[$key]['theme path'] = $module_path;
      $theme_registry[$key] = array_merge($theme_registry[$key], $template_file_object);
      $theme_registry[$key]['type'] = 'module';
    }
  }

  $theme_registry['cu_mega_menu']['template'] = 'cu-mega-menu-wrapper';
  $theme_registry['cu_mega_menu']['path'] = drupal_get_path('module', 'cu_mega_menu') . '/templates';
}

/**
 * Implements hook_entity_info().
 *
 * This is the fundamental description of the entity.
 *
 * It provides a single entity with a single bundle and without revision
 * support.
 */
function cu_mega_menu_entity_info() {
  $info['cu_mega_menu'] = array(
    // A human readable label to identify our entity.
    'label' => t('Mega Menu'),

    // The controller for our Entity, extending the Drupal core controller.
    'controller class' => 'CUMegaMenuController',
    // The table for this entity defined in hook_schema()
    'base table' => 'cu_mega_menu',

    // Returns the uri elements of an entity.
    'uri callback' => 'cu_mega_menu_uri',

    // IF fieldable == FALSE, we can't attach fields.
    'fieldable' => TRUE,

    // entity_keys tells the controller what database fields are used for key
    // functions. It is not required if we don't have bundles or revisions.
    // Here we do not support a revision, so that entity key is omitted.
    'entity keys' => array(
      // The 'id' (basic_id here) is the unique id.
      'id' => 'id' ,
      // Bundle will be determined by the 'bundle_type' field.
      'bundle' => 'bundle_type',
    ),
    'bundle keys' => array(
      'bundle' => 'bundle_type',
    ),

    // FALSE disables caching. Caching functionality is handled by Drupal core.
    'static cache' => TRUE,

    // Bundles are alternative groups of fields or configuration
    // associated with a base entity type.
    'bundles' => array(
      'mega_menu' => array(
        'label' => 'Mega Menu',
        // 'admin' key is used by the Field UI to provide field and
        // display UI pages.
        'admin' => array(
          'path' => 'admin/structure/cu-mega-menu/configure',
          'access arguments' => array('administer cu_mega_menu entities'),
        ),
      ),
    ),
    'view callback' => 'cu_mega_menu_view',
    // View modes allow entities to be displayed differently based on context.
    // As a demonstration we'll support "Tweaky", but we could have and support
    // multiple display modes.
    'view modes' => array(
      'full' => array(
        'label' => t('Full'),
        'custom settings' => FALSE,
      ),
    ),
  );

  return $info;
}

/**
 * Fetch a basic object.
 *
 * This function ends up being a shim between the menu system and
 * entity_example_basic_load_multiple().
 *
 * This function gets its name from the menu system's wildcard
 * naming conventions. For example, /path/%wildcard would end
 * up calling wildcard_load(%wildcard value). In our case defining
 * the path: examples/entity_example/basic/%entity_example_basic in
 * hook_menu() tells Drupal to call entity_example_basic_load().
 *
 * @param int $basic_id
 *   Integer specifying the basic entity id.
 * @param bool $reset
 *   A boolean indicating that the internal cache should be reset.
 *
 * @return object
 *   A fully-loaded $basic object or FALSE if it cannot be loaded.
 *
 * @see entity_example_basic_load_multiple()
 * @see entity_example_menu()
 */
function cu_mega_menu_load($id = NULL, $reset = FALSE) {
  $ids = (isset($id) ? array($id) : array());
  $entity = cu_mega_menu_load_multiple($ids, array(), $reset);
  return $entity ? reset($entity) : FALSE;
}

/**
 * Loads multiple basic entities.
 *
 * We only need to pass this request along to entity_load(), which
 * will in turn call the load() method of our entity controller class.
 */
function cu_mega_menu_load_multiple($ids = FALSE, $conditions = array(), $reset = FALSE) {
  return entity_load('cu_mega_menu', $ids, $conditions, $reset);
}

/**
 * Implements the uri callback.
 */
function cu_mega_menu_uri($entity) {
  return array(
    'path' => 'mega-menu/' . $entity->id,
  );
}

/**
 * Implements hook_menu().
 */
function cu_mega_menu_menu() {

  $items['admin/structure/cu-mega-menu/configure'] = array(
    'title' => 'Configure Mega Menus',
    'description' => 'Create content for main menu items.',
    'page callback' => 'cu_mega_menu_list_entities',
    'access arguments' => array('administer cu_mega_menu entities'),
  );
  $items['admin/structure/cu-mega-menu/configure/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => array('administer cu_mega_menu entities'),
  );

  // This provides a place for Field API to hang its own
  // interface and has to be the same as what was defined
  // in basic_entity_info() above.
  $items['admin/structure/mega-menu'] = array(
    'title' => 'Administer Mega Menus',
    'description' => 'Create content for main menu items.',
    'page callback' => 'cu_mega_menu_list_entities',
    'access arguments' => array('create cu_mega_menu entities'),
  );

  // Add example entities.
  $items['admin/structure/mega-menu/add'] = array(
    'title' => 'Add a Mega Menu',
    'page callback' => 'cu_mega_menu_add',
    'access arguments' => array('create cu_mega_menu entities'),
    'type' => MENU_LOCAL_ACTION,
  );

  // List of all entity_example_basic entities.
  $items['admin/structure/mega-menu/list'] = array(
    'title' => 'List',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'access arguments' => array('create cu_mega_menu entities'),
  );

  // The page to view our entities - needs to follow what
  // is defined in basic_uri and will use load_basic to retrieve
  // the necessary entity info.
  $items['mega-menu/view/%cu_mega_menu'] = array(
    'title callback' => 'cu_mega_menu_title',
    'title arguments' => array(1),
    'page callback' => 'cu_mega_menu_view',
    'page arguments' => array(1),
    'access arguments' => array('view any cu_mega_menu entity'),
  );

  // 'View' tab for an individual entity page.
  $items['mega-menu/%cu_mega_menu_uri/view'] = array(
    'title' => 'View',
    'type' => MENU_DEFAULT_LOCAL_TASK,
    'weight' => -10,
  );

  // 'Edit' tab for an individual entity page.
  $items['admin/structure/mega-menu/edit/%cu_mega_menu'] = array(
    'title' => 'Edit',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cu_mega_menu_form', 4),
    'access arguments' => array('edit any cu_mega_menu entity'),
    'type' => MENU_LOCAL_TASK,
  );

  // Add item to settings page.
  $items['admin/settings/menus/mega-menu'] = array(
    'title' => 'Mega Menus',
    'description' => 'Add additonal content and links to main menu items.',
    'type' => MENU_NORMAL_ITEM,
    'page callback' => 'drupal_goto',
    'page arguments' => array('admin/structure/mega-menu'),
    'access arguments' => array('administer menu'),
    'weight' => 10,
  );

  return $items;
}

function cu_mega_menu_blank($a, $b) {
  return array();
}


/**
 * Basic information for the page.
 */
function cu_mega_menu_info_page() {
  if (user_access('administer cu_mega_menu entities')) {
    $content['preface']['#markup'] = t('You can administer these and add fields and change the view !link.',
      array('!link' => l(t('here'), 'admin/structure/mega-menu/configure'))
    );
  }
  $content['table'] = cu_mega_menu_list_entities();

  return $content;
}

/**
 * Implements hook_permission().
 */
function cu_mega_menu_permission() {
  $permissions = array(

    'administer cu_mega_menu entities' => array(
      'title' => t('Administer cu_mega_menu entities'),
    ),
    'view any cu_mega_menu entity' => array(
      'title' => t('View any cu_mega_menu entity'),
    ),
    'edit any cu_mega_menu entity' => array(
      'title' => t('Edit any cu_mega_menu entity'),
    ),
    'create cu_mega_menu entities' => array(
      'title' => t('Create cu_mega_menu Entities'),
    ),
  );
  return $permissions;
}

function cu_mega_menu_secure_permissions($role) {
  $permissions = array(
    'developer' => array(
      'administer cu_mega_menu entities',
      'view any cu_mega_menu entity',
      'edit any cu_mega_menu entity',
      'create cu_mega_menu entities',
    ),
    'administrator' => array(
      'view any cu_mega_menu entity',
      'edit any cu_mega_menu entity',
      'create cu_mega_menu entities',
    ),
    'site_owner' => array(
      'view any cu_mega_menu entity',
      'edit any cu_mega_menu entity',
      'create cu_mega_menu entities',
    ),
    'site_editor' => array(
      'view any cu_mega_menu entity',
      'edit any cu_mega_menu entity',
      'create cu_mega_menu entities',
    ),
  );

  if (isset($permissions[$role])) {
    return $permissions[$role];
  }
}


/**
 * Returns a render array with all entity_example_basic entities.
 *
 * In this basic example we know that there won't be many entities,
 * so we'll just load them all for display. See pager_example.module
 * to implement a pager. Most implementations would probably do this
 * with the contrib Entity API module, or a view using views module,
 * but we avoid using non-core features in the Examples project.
 *
 * @see pager_example.module
 */
function cu_mega_menu_list_entities() {
  $content = array();
  // Load all of our entities.
  $entities = cu_mega_menu_load_multiple();
  if (!empty($entities)) {
    foreach ($entities as $entity) {
      // Create tabular rows for our entities.
      $rows[] = array(
        'data' => array(
          'title' => l($entity->title, 'admin/structure/mega-menu/edit/' . $entity->id),
        ),
      );
    }
    // Put our entities into a themed table. See theme_table() for details.
    $content['entity_table'] = array(
      '#theme' => 'table',
      '#rows' => $rows,
      '#header' => array(t('Title')),
    );
  }
  else {
    // There were no entities. Tell the user.
    $content[] = array(
      '#type' => 'item',
      '#markup' => t('No mega menus currently exist.'),
    );
  }
  return $content;
}


/**
 * Callback for a page title when this entity is displayed.
 */
function cu_mega_menu_title($entity) {
  return t('@title', array('@title' => $entity->title));
}

/**
 * Menu callback to display an entity.
 *
 * As we load the entity for display, we're responsible for invoking a number
 * of hooks in their proper order.
 *
 * @see hook_entity_prepare_view()
 * @see hook_entity_view()
 * @see hook_entity_view_alter()
 */
function cu_mega_menu_view($entity, $view_mode = 'full') {
  $entity = current($entity);
  // Our entity type, for convenience.
  $entity_type = 'cu_mega_menu';
  // Start setting up the content.
  $entity->content = array(
    '#view_mode' => $view_mode,
  );
  // Build fields content - this is where the Field API really comes in to play.
  // The task has very little code here because it all gets taken care of by
  // field module.
  // field_attach_prepare_view() lets the fields load any data they need
  // before viewing.
  field_attach_prepare_view($entity_type, array($entity->id => $entity),
    $view_mode);
  // We call entity_prepare_view() so it can invoke hook_entity_prepare_view()
  // for us.
  entity_prepare_view($entity_type, array($entity->id => $entity));
  // Now field_attach_view() generates the content for the fields.
  $entity->content += field_attach_view($entity_type, $entity, $view_mode);

  // OK, Field API done, now we can set up some of our own data.
  $entity->content['created'] = array(
    '#type' => 'item',
    '#title' => t('Created date'),
    '#markup' => format_date($entity->created),
  );
  $entity->content['title'] = array(
    '#type' => 'item',
    '#title' => t('Title'),
    '#markup' => $entity->title,
  );

  // Now to invoke some hooks. We need the language code for
  // hook_entity_view(), so let's get that.
  global $language;
  $langcode = $language->language;
  // And now invoke hook_entity_view().
  module_invoke_all('entity_view', $entity, $entity_type, $view_mode,
    $langcode);
  // Now invoke hook_entity_view_alter().
  drupal_alter(array('cu_mega_menu_output_view', 'entity_view'),
    $entity->content, $entity_type);

  // And finally return the content.
  return $entity->content;
}

/**
 * Implements hook_field_extra_fields().
 *
 * This exposes the "extra fields" (usually properties that can be configured
 * as if they were fields) of the entity as pseudo-fields
 * so that they get handled by the Entity and Field core functionality.
 * Node titles get treated in a similar manner.
 */
function cu_mega_menu_field_extra_fields() {
  $form_elements['title'] = array(
    'label' => t('Title'),
    'description' => t('Title'),
    'weight' => -5,
  );
  $display_elements['created'] = array(
    'label' => t('Creation date'),
    'title' => t('Title'),
    'weight' => 0,
  );

  // Since we have only one bundle type, we'll just provide the extra_fields
  // for it here.
  $extra_fields['cu_mega_menu']['mega_menu']['form'] = $form_elements;

  $extra_fields['cu_mega_menu']['mega_menu']['display'] = $display_elements;

  return $extra_fields;
}

/**
 * Provides a wrapper on the edit form to add a new entity.
 */
function cu_mega_menu_add() {
  // Create a basic entity structure to be used and passed to the validation
  // and submission functions.
  drupal_set_title('Add a Mega Menu');
  $entity = entity_get_controller('cu_mega_menu')->create();
  return drupal_get_form('cu_mega_menu_form', $entity);
}

/**
 * Form function to create an entity_example_basic entity.
 *
 * The pattern is:
 * - Set up the form for the data that is specific to your
 *   entity: the columns of your base table.
 * - Call on the Field API to pull in the form elements
 *   for fields attached to the entity.
 */
function cu_mega_menu_form($form, &$form_state, $entity) {
  $form['title'] = array(
    '#type' => 'textfield',
    '#required' => TRUE,
    '#default_value' => $entity->title,
    '#title' => 'Label',
  );
  $form['mega_menu'] = array(
    '#type' => 'value',
    '#value' => $entity,
  );

  field_attach_form('cu_mega_menu', $entity, $form, $form_state);
  $form['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Save'),
    '#weight' => 100,
  );
  if ($entity->id != 0) {
    drupal_set_title('Edit Mega Menu');
    $form['delete'] = array(
      '#type' => 'submit',
      '#value' => t('Delete'),
      '#submit' => array('cu_mega_menu_edit_delete'),
      '#weight' => 200,
    );
  }

  return $form;
}

/**
 * Validation handler for entity_example_basic_add_form form.
 *
 * We pass things straight through to the Field API to handle validation
 * of the attached fields.
 */
function cu_mega_menu_form_validate($form, &$form_state) {
  field_attach_form_validate('cu_mega_menu', $form_state['values']['mega_menu'], $form, $form_state);
}

/**
 * Form submit handler: Submits basic_add_form information.
 */
function cu_mega_menu_form_submit($form, &$form_state) {
  $entity = $form_state['values']['mega_menu'];
  $entity->title = $form_state['values']['title'];
  field_attach_submit('cu_mega_menu', $entity, $form, $form_state);
  $entity = cu_mega_menu_save($entity);
  $form_state['redirect'] = 'admin/structure/mega-menu/manage';
}

/**
 * Form deletion handler.
 *
 * @todo: 'Are you sure?' message.
 */
function cu_mega_menu_edit_delete($form, &$form_state) {
  $entity = $form_state['values']['mega_menu'];
  cu_mega_menu_delete($entity);
  drupal_set_message(t('The mega menu %id has been deleted',
    array('%id' => $entity->title))
  );
  $form_state['redirect'] = 'admin/structure/mega-menu/list';
}

/**
 * We save the entity by calling the controller.
 */
function cu_mega_menu_save(&$entity) {
  return entity_get_controller('cu_mega_menu')->save($entity);
}

/**
 * Use the controller to delete the entity.
 */
function cu_mega_menu_delete($entity) {
  entity_get_controller('cu_mega_menu')->delete($entity);
}

/**
 * EntityExampleBasicControllerInterface definition.
 *
 * We create an interface here because anyone could come along and
 * use hook_entity_info_alter() to change our controller class.
 * We want to let them know what methods our class needs in order
 * to function with the rest of the module, so here's a handy list.
 *
 * @see hook_entity_info_alter()
 */
interface CUMegaMenuControllerInterface
  extends DrupalEntityControllerInterface {

  /**
   * Create an entity.
   */
  public function create();

  /**
   * Save an entity.
   *
   * @param object $entity
   *   The entity to save.
   */
  public function save($entity);

  /**
   * Delete an entity.
   *
   * @param object $entity
   *   The entity to delete.
   */
  public function delete($entity);

}

/**
 * EntityExampleBasicController extends DrupalDefaultEntityController.
 *
 * Our subclass of DrupalDefaultEntityController lets us add a few
 * important create, update, and delete methods.
 */
class CUMegaMenuController
  extends DrupalDefaultEntityController
  implements CUMegaMenuControllerInterface {

  /**
   * Create and return a new entity_example_basic entity.
   */
  public function create() {
    $entity = new stdClass();
    $entity->type = 'cu_mega_menu';
    $entity->id = 0;
    $entity->bundle_type = 'mega_menu';
    $entity->title = '';
    return $entity;
  }

  /**
   * Saves the custom fields using drupal_write_record().
   */
  public function save($entity) {
    // If our entity has no basic_id, then we need to give it a
    // time of creation.
    if (empty($entity->id)) {
      $entity->created = time();
    }
    // Invoke hook_entity_presave().
    module_invoke_all('entity_presave', $entity, 'cu_mega_menu');
    // The 'primary_keys' argument determines whether this will be an insert
    // or an update. So if the entity already has an ID, we'll specify
    // basic_id as the key.
    $primary_keys = $entity->id ? 'id' : array();
    // Write out the entity record.
    drupal_write_record('cu_mega_menu', $entity, $primary_keys);
    // We're going to invoke either hook_entity_update() or
    // hook_entity_insert(), depending on whether or not this is a
    // new entity. We'll just store the name of hook_entity_insert()
    // and change it if we need to.
    $invocation = 'entity_insert';
    // Now we need to either insert or update the fields which are
    // attached to this entity. We use the same primary_keys logic
    // to determine whether to update or insert, and which hook we
    // need to invoke.
    if (empty($primary_keys)) {
      field_attach_insert('cu_mega_menu', $entity);
    }
    else {
      field_attach_update('cu_mega_menu', $entity);
      $invocation = 'entity_update';
    }
    // Invoke either hook_entity_update() or hook_entity_insert().
    module_invoke_all($invocation, $entity, 'cu_mega_menu');
    return $entity;
  }

  /**
   * Delete a single entity.
   *
   * Really a convenience function for deleteMultiple().
   */
  public function delete($entity) {
    $this->deleteMultiple(array($entity));
  }

  /**
   * Delete one or more entity_example_basic entities.
   *
   * Deletion is unfortunately not supported in the base
   * DrupalDefaultEntityController class.
   *
   * @param array $entities
   *   An array of entity IDs or a single numeric ID.
   */
  public function deleteMultiple($entities) {
    $ids = array();
    if (!empty($entities)) {
      $transaction = db_transaction();
      try {
        foreach ($entities as $entity) {
          // Invoke hook_entity_delete().
          module_invoke_all('entity_delete', $entity, 'cu_mega_menu');
          field_attach_delete('cu_mega_menu', $entity);
          $ids[] = $entity->id;
        }
        db_delete('cu_mega_menu')
          ->condition('id', $ids, 'IN')
          ->execute();
      }
      catch (Exception $e) {
        $transaction->rollback();
        watchdog_exception('cu_mega_menu', $e);
        throw $e;
      }
    }
  }
  public function buildContent($entity, $view_mode = 'full', $langcode = NULL, $content = array()) {
    if (is_array($entity)) {
      $entity = current($entity);
    }
    $build = parent::buildContent($entity, $view_mode, $langcode, $content);
    return $build;

  }
}


/**
 * Implements hook_field_default_field_bases().
 */
function cu_mega_menu_field_default_field_bases() {
  $field_bases = array();

  // Exported field_base: 'field_mega_menu_label'.
  $field_bases['field_mega_menu_label'] = array(
    'active' => 1,
    'cardinality' => 1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'field_mega_menu_label',
    'indexes' => array(
      'format' => array(
        0 => 'format',
      ),
    ),
    'locked' => 0,
    'module' => 'text',
    'settings' => array(
      'max_length' => 255,
    ),
    'translatable' => 0,
    'type' => 'text',
  );

  // Exported field_base: 'field_mega_menu_link'.
  $field_bases['field_mega_menu_link'] = array(
    'active' => 1,
    'cardinality' => 1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'field_mega_menu_link',
    'indexes' => array(),
    'locked' => 0,
    'module' => 'link',
    'settings' => array(
      'attributes' => array(
        'class' => '',
        'rel' => '',
        'target' => 'default',
      ),
      'display' => array(
        'url_cutoff' => 80,
      ),
      'enable_tokens' => 1,
      'title' => 'optional',
      'title_maxlength' => 128,
      'title_value' => '',
      'url' => 0,
    ),
    'translatable' => 0,
    'type' => 'link_field',
  );

  // Exported field_base: 'field_mega_menu_link_desc'.
  $field_bases['field_mega_menu_link_desc'] = array(
    'active' => 1,
    'cardinality' => 1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'field_mega_menu_link_desc',
    'indexes' => array(
      'format' => array(
        0 => 'format',
      ),
    ),
    'locked' => 0,
    'module' => 'text',
    'settings' => array(
      'max_length' => 255,
    ),
    'translatable' => 0,
    'type' => 'text',
  );

  // Exported field_base: 'field_mega_menu_link_fc'.
  $field_bases['field_mega_menu_link_fc'] = array(
    'active' => 1,
    'cardinality' => -1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'field_mega_menu_link_fc',
    'indexes' => array(
      'revision_id' => array(
        0 => 'revision_id',
      ),
      'value' => array(
        0 => 'value',
      ),
    ),
    'locked' => 0,
    'module' => 'field_collection',
    'settings' => array(
      'hide_blank_items' => 1,
      'hide_initial_item' => 0,
      'path' => '',
    ),
    'translatable' => 0,
    'type' => 'field_collection',
  );

  // Exported field_base: 'field_mega_menu_links'.
  $field_bases['field_mega_menu_links'] = array(
    'active' => 1,
    'cardinality' => -1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'field_mega_menu_links',
    'indexes' => array(
      'revision_id' => array(
        0 => 'revision_id',
      ),
      'value' => array(
        0 => 'value',
      ),
    ),
    'locked' => 0,
    'module' => 'field_collection',
    'settings' => array(
      'hide_blank_items' => 1,
      'hide_initial_item' => 0,
      'path' => '',
    ),
    'translatable' => 0,
    'type' => 'field_collection',
  );

  // Exported field_base: 'field_mega_menu_links_label'.
  $field_bases['field_mega_menu_links_label'] = array(
    'active' => 1,
    'cardinality' => 1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'field_mega_menu_links_label',
    'indexes' => array(
      'format' => array(
        0 => 'format',
      ),
    ),
    'locked' => 0,
    'module' => 'text',
    'settings' => array(
      'max_length' => 255,
    ),
    'translatable' => 0,
    'type' => 'text',
  );

  // Exported field_base: 'field_mega_menu_text_above'.
  $field_bases['field_mega_menu_text_above'] = array(
    'active' => 1,
    'cardinality' => 1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'field_mega_menu_text_above',
    'indexes' => array(
      'format' => array(
        0 => 'format',
      ),
    ),
    'locked' => 0,
    'module' => 'text',
    'settings' => array(),
    'translatable' => 0,
    'type' => 'text_long',
  );

  // Exported field_base: 'field_mega_menu_text_below'.
  $field_bases['field_mega_menu_text_below'] = array(
    'active' => 1,
    'cardinality' => 1,
    'deleted' => 0,
    'entity_types' => array(),
    'field_name' => 'field_mega_menu_text_below',
    'indexes' => array(
      'format' => array(
        0 => 'format',
      ),
    ),
    'locked' => 0,
    'module' => 'text',
    'settings' => array(),
    'translatable' => 0,
    'type' => 'text_long',
  );

  return $field_bases;
}

/**
 * Implements hook_field_default_field_instances().
 */
function cu_mega_menu_field_default_field_instances() {
  $field_instances = array();

  // Exported field_instance:
  // 'field_collection_item-field_mega_menu_link_fc-field_mega_menu_link'.
  $field_instances['field_collection_item-field_mega_menu_link_fc-field_mega_menu_link'] = array(
    'bundle' => 'field_mega_menu_link_fc',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'module' => 'link',
        'settings' => array(),
        'type' => 'link_default',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'field_collection_item',
    'fences_wrapper' => 'no_wrapper',
    'field_name' => 'field_mega_menu_link',
    'label' => 'Link',
    'required' => 0,
    'settings' => array(
      'absolute_url' => 1,
      'attributes' => array(
        'class' => '',
        'configurable_class' => 0,
        'configurable_title' => 0,
        'rel' => '',
        'target' => 'default',
        'title' => '',
      ),
      'display' => array(
        'url_cutoff' => 80,
      ),
      'enable_tokens' => 1,
      'linkit' => array(
        'button_text' => 'Search',
        'enable' => 1,
        'profile' => 'express_linkit_field_profile',
      ),
      'rel_remove' => 'default',
      'title' => 'required',
      'title_allowed_values' => '',
      'title_label_use_field_label' => 0,
      'title_maxlength' => 128,
      'title_value' => '',
      'url' => 0,
      'user_register_form' => FALSE,
      'validate_url' => 1,
    ),
    'widget' => array(
      'active' => 0,
      'module' => 'link',
      'settings' => array(),
      'type' => 'link_field',
      'weight' => 2,
    ),
  );

  // Exported field_instance:
  // 'field_collection_item-field_mega_menu_link_fc-field_mega_menu_link_desc'.
  $field_instances['field_collection_item-field_mega_menu_link_fc-field_mega_menu_link_desc'] = array(
    'bundle' => 'field_mega_menu_link_fc',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 1,
      ),
    ),
    'entity_type' => 'field_collection_item',
    'fences_wrapper' => 'div_div_div',
    'field_name' => 'field_mega_menu_link_desc',
    'label' => 'Description',
    'required' => 0,
    'settings' => array(
      'linkit' => array(
        'button_text' => 'Search',
        'enable' => 0,
        'profile' => '',
      ),
      'text_processing' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'size' => 60,
      ),
      'type' => 'text_textfield',
      'weight' => 3,
    ),
  );

  // Exported field_instance:
  // 'field_collection_item-field_mega_menu_links-field_mega_menu_link_fc'.
  $field_instances['field_collection_item-field_mega_menu_links-field_mega_menu_link_fc'] = array(
    'bundle' => 'field_mega_menu_links',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'module' => 'field_collection',
        'settings' => array(
          'view_mode' => 'full',
        ),
        'type' => 'field_collection_fields',
        'weight' => 3,
      ),
    ),
    'entity_type' => 'field_collection_item',
    'fences_wrapper' => 'ul',
    'field_name' => 'field_mega_menu_link_fc',
    'label' => 'Link',
    'required' => 1,
    'settings' => array(
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 0,
      'module' => 'field_collection',
      'settings' => array(),
      'type' => 'field_collection_embed',
      'weight' => 3,
    ),
  );

  // Exported field_instance:
  // 'field_collection_item-field_mega_menu_links-field_mega_menu_links_label'.
  $field_instances['field_collection_item-field_mega_menu_links-field_mega_menu_links_label'] = array(
    'bundle' => 'field_mega_menu_links',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'field_collection_item',
    'fences_wrapper' => 'strong',
    'field_name' => 'field_mega_menu_links_label',
    'label' => 'Label',
    'required' => 0,
    'settings' => array(
      'linkit' => array(
        'button_text' => 'Search',
        'enable' => 0,
        'profile' => '',
      ),
      'text_processing' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'size' => 60,
      ),
      'type' => 'text_textfield',
      'weight' => 0,
    ),
  );

  // Exported field_instance: 'mega_menu-mega_menu-field_mega_menu_label'.
  $field_instances['mega_menu-mega_menu-field_mega_menu_label'] = array(
    'bundle' => 'mega_menu',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 0,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'cu_mega_menu',
    'fences_wrapper' => 'no_wrapper',
    'field_name' => 'field_mega_menu_label',
    'label' => 'Heading',
    'required' => 1,
    'settings' => array(
      'linkit' => array(
        'button_text' => 'Search',
        'enable' => 0,
        'profile' => '',
      ),
      'text_processing' => 0,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'size' => 60,
      ),
      'type' => 'text_textfield',
      'weight' => 1,
    ),
  );

  // Exported field_instance: 'mega_menu-mega_menu-field_mega_menu_links'.
  $field_instances['mega_menu-mega_menu-field_mega_menu_links'] = array(
    'bundle' => 'mega_menu',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'module' => 'field_collection',
        'settings' => array(
          'view_mode' => 'full',
        ),
        'type' => 'field_collection_fields',
        'weight' => 2,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'cu_mega_menu',
    'fences_wrapper' => 'no_wrapper',
    'field_name' => 'field_mega_menu_links',
    'label' => 'Links',
    'required' => 0,
    'settings' => array(
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 0,
      'module' => 'field_collection',
      'settings' => array(),
      'type' => 'field_collection_embed',
      'weight' => 3,
    ),
  );

  // Exported field_instance: 'mega_menu-mega_menu-field_mega_menu_text_above'.
  $field_instances['mega_menu-mega_menu-field_mega_menu_text_above'] = array(
    'bundle' => 'mega_menu',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 1,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'cu_mega_menu',
    'fences_wrapper' => 'no_wrapper',
    'field_name' => 'field_mega_menu_text_above',
    'label' => 'Text Above',
    'required' => 0,
    'settings' => array(
      'linkit' => array(
        'button_text' => 'Search',
        'enable' => 0,
        'profile' => '',
      ),
      'text_processing' => 1,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'rows' => 5,
      ),
      'type' => 'text_textarea',
      'weight' => 2,
    ),
  );

  // Exported field_instance: 'mega_menu-mega_menu-field_mega_menu_text_below'.
  $field_instances['mega_menu-mega_menu-field_mega_menu_text_below'] = array(
    'bundle' => 'mega_menu',
    'default_value' => NULL,
    'deleted' => 0,
    'description' => '',
    'display' => array(
      'default' => array(
        'label' => 'hidden',
        'module' => 'text',
        'settings' => array(),
        'type' => 'text_default',
        'weight' => 3,
      ),
      'teaser' => array(
        'label' => 'above',
        'settings' => array(),
        'type' => 'hidden',
        'weight' => 0,
      ),
    ),
    'entity_type' => 'cu_mega_menu',
    'fences_wrapper' => 'no_wrapper',
    'field_name' => 'field_mega_menu_text_below',
    'label' => 'Text Below',
    'required' => 0,
    'settings' => array(
      'linkit' => array(
        'button_text' => 'Search',
        'enable' => 0,
        'profile' => '',
      ),
      'text_processing' => 1,
      'user_register_form' => FALSE,
    ),
    'widget' => array(
      'active' => 1,
      'module' => 'text',
      'settings' => array(
        'rows' => 5,
      ),
      'type' => 'text_textarea',
      'weight' => 4,
    ),
  );

  // Translatables
  // Included for use with string extractors like potx.
  t('Description');
  t('Label');
  t('Link');
  t('Links');
  t('Text Above');
  t('Text Below');

  return $field_instances;
}
